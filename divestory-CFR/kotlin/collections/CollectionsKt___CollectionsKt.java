/*
 * Decompiled with CFR <Could not determine version>.
 * 
 * Could not load the following classes:
 *  kotlin.collections.CollectionsKt___CollectionsKt$asSequence$
 *  kotlin.collections.CollectionsKt___CollectionsKt$asSequence$$inlined
 *  kotlin.collections.CollectionsKt___CollectionsKt$asSequence$$inlined$Sequence
 *  kotlin.collections.CollectionsKt___CollectionsKt$elementAt
 *  kotlin.collections.CollectionsKt___CollectionsKt$groupingBy
 *  kotlin.collections.CollectionsKt___CollectionsKt$withIndex
 *  kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareBy
 *  kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareByDescending
 */
package kotlin.collections;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.RandomAccess;
import java.util.Set;
import kotlin.Metadata;
import kotlin.Pair;
import kotlin.TuplesKt;
import kotlin.TypeCastException;
import kotlin.Unit;
import kotlin.collections.ArraysKt;
import kotlin.collections.CollectionsKt;
import kotlin.collections.CollectionsKt___CollectionsJvmKt;
import kotlin.collections.CollectionsKt___CollectionsKt;
import kotlin.collections.CollectionsKt___CollectionsKt$asSequence$;
import kotlin.collections.Grouping;
import kotlin.collections.IndexedValue;
import kotlin.collections.IndexingIterable;
import kotlin.collections.MapsKt;
import kotlin.collections.MovingSubList;
import kotlin.collections.SetsKt;
import kotlin.collections.SlidingWindowKt;
import kotlin.comparisons.ComparisonsKt;
import kotlin.comparisons.ComparisonsKt__ComparisonsKt;
import kotlin.internal.PlatformImplementationsKt;
import kotlin.jvm.functions.Function0;
import kotlin.jvm.functions.Function1;
import kotlin.jvm.functions.Function2;
import kotlin.jvm.functions.Function3;
import kotlin.jvm.internal.DoubleCompanionObject;
import kotlin.jvm.internal.Intrinsics;
import kotlin.random.Random;
import kotlin.ranges.IntRange;
import kotlin.ranges.RangesKt;
import kotlin.sequences.Sequence;
import kotlin.sequences.SequencesKt;
import kotlin.text.StringsKt;

/*
 * Duplicate member names - consider using --renamedupmembers true
 * Exception performing whole class analysis.
 */
@Metadata(bv={1, 0, 3}, d1={"\u0000\u00da\u0002\n\u0000\n\u0002\u0010\u000b\n\u0000\n\u0002\u0010\u001c\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010%\n\u0002\b\b\n\u0002\u0010\u0006\n\u0002\u0010\u0005\n\u0002\b\u0002\n\u0002\u0010\u0007\n\u0000\n\u0002\u0010\b\n\u0000\n\u0002\u0010\t\n\u0000\n\u0002\u0010\n\n\u0002\b\u0002\n\u0002\u0010 \n\u0002\b\t\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\u001e\n\u0002\b\u0013\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\u001f\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\u0000\n\u0002\b\u0013\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\u0002\n\u0002\b\u0006\n\u0002\u0010!\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\"\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\r\n\u0002\b\u0006\n\u0002\u0010\u000e\n\u0002\b\f\n\u0002\u0010\u000f\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0010\u0011\n\u0002\b\f\n\u0002\u0018\u0002\n\u0002\b\u0019\n\u0002\u0018\u0002\n\u0002\b\u0017\n\u0002\u0010\u0018\n\u0000\n\u0002\u0010\u0012\n\u0000\n\u0002\u0010\u0019\n\u0002\u0010\f\n\u0002\b\u0002\n\u0002\u0010\u0013\n\u0000\n\u0002\u0010\u0014\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0015\n\u0002\b\u0002\n\u0002\u0010\u0016\n\u0002\b\u0002\n\u0002\u0010#\n\u0002\b\u0002\n\u0002\u0010\u0017\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\b\u0006\u001a-\u0010\u0000\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a\u0016\u0010\u0006\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a-\u0010\u0006\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a\u001f\u0010\u0007\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0087\b\u001a\u001c\u0010\b\u001a\b\u0012\u0004\u0012\u0002H\u00020\t\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001aQ\u0010\n\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001e\u0010\u000e\u001a\u001a\u0012\u0004\u0012\u0002H\u0002\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000f0\u0005H\u0086\b\u001a?\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\u00020\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b\u001aY\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\b\u001aZ\u0010\u0013\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0018\b\u0002\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\u00020\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b\u00a2\u0006\u0002\u0010\u0017\u001at\u0010\u0013\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r\"\u0018\b\u0003\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\r0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\b\u00a2\u0006\u0002\u0010\u0018\u001al\u0010\u0019\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r\"\u0018\b\u0003\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\r0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u001e\u0010\u000e\u001a\u001a\u0012\u0004\u0012\u0002H\u0002\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000f0\u0005H\u0086\b\u00a2\u0006\u0002\u0010\u0017\u001a?\u0010\u001a\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000b\"\u0004\b\u0000\u0010\f\"\u0004\b\u0001\u0010\r*\b\u0012\u0004\u0012\u0002H\f0\u00032\u0012\u0010\u001b\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u0005H\u0087\b\u001aZ\u0010\u001c\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\f\"\u0004\b\u0001\u0010\r\"\u0018\b\u0002\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\r0\u0015*\b\u0012\u0004\u0012\u0002H\f0\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u001b\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u0005H\u0087\b\u00a2\u0006\u0002\u0010\u0017\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020\u001f0\u0003H\u0007\u00a2\u0006\u0002\b \u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007\u00a2\u0006\u0002\b!\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007\u00a2\u0006\u0002\b#\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020$0\u0003H\u0007\u00a2\u0006\u0002\b%\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020&0\u0003H\u0007\u00a2\u0006\u0002\b'\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020(0\u0003H\u0007\u00a2\u0006\u0002\b)\u001a,\u0010*\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+0+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010,\u001a\u00020$H\u0007\u001aF\u0010*\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010,\u001a\u00020$2\u0018\u0010\u000e\u001a\u0014\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+\u0012\u0004\u0012\u0002H-0\u0005H\u0007\u001a\u001e\u0010.\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+H\u0087\n\u00a2\u0006\u0002\u0010/\u001a\u001e\u00100\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+H\u0087\n\u00a2\u0006\u0002\u0010/\u001a\u001e\u00101\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+H\u0087\n\u00a2\u0006\u0002\u0010/\u001a\u001e\u00102\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+H\u0087\n\u00a2\u0006\u0002\u0010/\u001a\u001e\u00103\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+H\u0087\n\u00a2\u0006\u0002\u0010/\u001a+\u00104\u001a\u00020\u0001\"\t\b\u0000\u0010\u0002\u00a2\u0006\u0002\b5*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00106\u001a\u0002H\u0002H\u0086\u0002\u00a2\u0006\u0002\u00107\u001a\u0019\u00108\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u000209H\u0087\b\u001a\u0016\u00108\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a-\u00108\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a\u001c\u0010:\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a9\u0010;\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b\u001a$\u0010=\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010>\u001a\u00020$\u001a$\u0010?\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010>\u001a\u00020$\u001a3\u0010@\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a3\u0010A\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a#\u0010B\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010C\u001a\u00020$\u00a2\u0006\u0002\u0010D\u001a&\u0010B\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010C\u001a\u00020$H\u0087\b\u00a2\u0006\u0002\u0010E\u001a7\u0010F\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010C\u001a\u00020$2\u0012\u0010G\u001a\u000e\u0012\u0004\u0012\u00020$\u0012\u0004\u0012\u0002H\u00020\u0005\u00a2\u0006\u0002\u0010H\u001a:\u0010F\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010C\u001a\u00020$2\u0012\u0010G\u001a\u000e\u0012\u0004\u0012\u00020$\u0012\u0004\u0012\u0002H\u00020\u0005H\u0087\b\u00a2\u0006\u0002\u0010I\u001a%\u0010J\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010C\u001a\u00020$\u00a2\u0006\u0002\u0010D\u001a(\u0010J\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010C\u001a\u00020$H\u0087\b\u00a2\u0006\u0002\u0010E\u001a3\u0010K\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001aH\u0010L\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032'\u0010\u0004\u001a#\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010MH\u0086\b\u001aa\u0010P\u001a\u0002HQ\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ2'\u0010\u0004\u001a#\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010MH\u0086\b\u00a2\u0006\u0002\u0010S\u001a$\u0010T\u001a\r\u0012\t\u0012\u0007H-\u00a2\u0006\u0002\bU0+\"\u0006\b\u0000\u0010-\u0018\u0001*\u0006\u0012\u0002\b\u00030\u0003H\u0086\b\u001a8\u0010V\u001a\u0002HQ\"\u0006\b\u0000\u0010-\u0018\u0001\"\u0010\b\u0001\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H-0R*\u0006\u0012\u0002\b\u00030\u00032\u0006\u0010\u0016\u001a\u0002HQH\u0086\b\u00a2\u0006\u0002\u0010W\u001a3\u0010X\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a\"\u0010Y\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\b\b\u0000\u0010\u0002*\u00020Z*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u0003\u001a;\u0010[\u001a\u0002HQ\"\u0010\b\u0000\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020R\"\b\b\u0001\u0010\u0002*\u00020Z*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ\u00a2\u0006\u0002\u0010W\u001aL\u0010\\\u001a\u0002HQ\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00a2\u0006\u0002\u0010]\u001aL\u0010^\u001a\u0002HQ\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00a2\u0006\u0002\u0010]\u001a4\u0010_\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0087\b\u00a2\u0006\u0002\u0010`\u001a4\u0010a\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0087\b\u00a2\u0006\u0002\u0010`\u001a4\u0010a\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0087\b\u00a2\u0006\u0002\u0010b\u001a\u001b\u0010c\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u00a2\u0006\u0002\u0010d\u001a2\u0010c\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00a2\u0006\u0002\u0010`\u001a\u001b\u0010c\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+\u00a2\u0006\u0002\u0010/\u001a\u001d\u0010e\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u00a2\u0006\u0002\u0010d\u001a4\u0010e\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00a2\u0006\u0002\u0010`\u001a\u001d\u0010e\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+\u00a2\u0006\u0002\u0010/\u001a?\u0010f\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0018\u0010\u000e\u001a\u0014\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H-0\u00030\u0005H\u0086\b\u001aX\u0010g\u001a\u0002HQ\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0010\b\u0002\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H-0R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ2\u0018\u0010\u000e\u001a\u0014\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H-0\u00030\u0005H\u0086\b\u00a2\u0006\u0002\u0010]\u001aU\u0010h\u001a\u0002H-\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010i\u001a\u0002H-2'\u0010j\u001a#\u0012\u0013\u0012\u0011H-\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(k\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0MH\u0086\b\u00a2\u0006\u0002\u0010l\u001aj\u0010m\u001a\u0002H-\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010i\u001a\u0002H-2<\u0010j\u001a8\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0013\u0012\u0011H-\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(k\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0nH\u0086\b\u00a2\u0006\u0002\u0010o\u001aU\u0010p\u001a\u0002H-\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010i\u001a\u0002H-2'\u0010j\u001a#\u0012\u0004\u0012\u0002H\u0002\u0012\u0013\u0012\u0011H-\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(k\u0012\u0004\u0012\u0002H-0MH\u0086\b\u00a2\u0006\u0002\u0010q\u001aj\u0010r\u001a\u0002H-\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010i\u001a\u0002H-2<\u0010j\u001a8\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0013\u0012\u0011H-\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(k\u0012\u0004\u0012\u0002H-0nH\u0086\b\u00a2\u0006\u0002\u0010s\u001a-\u0010t\u001a\u00020u\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010v\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020u0\u0005H\u0087\b\u001aB\u0010w\u001a\u00020u\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032'\u0010v\u001a#\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020u0MH\u0086\b\u001a:\u0010x\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010C\u001a\u00020$2\u0012\u0010G\u001a\u000e\u0012\u0004\u0012\u00020$\u0012\u0004\u0012\u0002H\u00020\u0005H\u0087\b\u00a2\u0006\u0002\u0010I\u001a%\u0010y\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010C\u001a\u00020$\u00a2\u0006\u0002\u0010E\u001aE\u0010z\u001a\u0014\u0012\u0004\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b\u001a_\u0010z\u001a\u0014\u0012\u0004\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\r0+0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\b\u001a^\u0010{\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u001c\b\u0002\u0010\u0014*\u0016\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020|0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b\u00a2\u0006\u0002\u0010\u0017\u001ax\u0010{\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r\"\u001c\b\u0003\u0010\u0014*\u0016\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\r0|0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\b\u00a2\u0006\u0002\u0010\u0018\u001aA\u0010}\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0~\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0014\b\u0004\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0087\b\u001a)\u0010\u001a\u00020$\"\t\b\u0000\u0010\u0002\u00a2\u0006\u0002\b5*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00106\u001a\u0002H\u0002\u00a2\u0006\u0003\u0010\u0001\u001a)\u0010\u001a\u00020$\"\t\b\u0000\u0010\u0002\u00a2\u0006\u0002\b5*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u00106\u001a\u0002H\u0002\u00a2\u0006\u0003\u0010\u0081\u0001\u001a.\u0010\u0082\u0001\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a.\u0010\u0082\u0001\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a.\u0010\u0083\u0001\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a.\u0010\u0083\u0001\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a0\u0010\u0084\u0001\u001a\t\u0012\u0004\u0012\u0002H\u00020\u0085\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u0086\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0004\u001a\u008d\u0001\u0010\u0087\u0001\u001a\u0003H\u0088\u0001\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010\u0088\u0001*\b0\u0089\u0001j\u0003`\u008a\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\b\u0010\u008b\u0001\u001a\u0003H\u0088\u00012\n\b\u0002\u0010\u008c\u0001\u001a\u00030\u008d\u00012\n\b\u0002\u0010\u008e\u0001\u001a\u00030\u008d\u00012\n\b\u0002\u0010\u008f\u0001\u001a\u00030\u008d\u00012\t\b\u0002\u0010\u0090\u0001\u001a\u00020$2\n\b\u0002\u0010\u0091\u0001\u001a\u00030\u008d\u00012\u0017\b\u0002\u0010\u000e\u001a\u0011\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u00030\u008d\u0001\u0018\u00010\u0005\u00a2\u0006\u0003\u0010\u0092\u0001\u001al\u0010\u0093\u0001\u001a\u00030\u0094\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\n\b\u0002\u0010\u008c\u0001\u001a\u00030\u008d\u00012\n\b\u0002\u0010\u008e\u0001\u001a\u00030\u008d\u00012\n\b\u0002\u0010\u008f\u0001\u001a\u00030\u008d\u00012\t\b\u0002\u0010\u0090\u0001\u001a\u00020$2\n\b\u0002\u0010\u0091\u0001\u001a\u00030\u008d\u00012\u0017\b\u0002\u0010\u000e\u001a\u0011\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u00030\u008d\u0001\u0018\u00010\u0005\u001a\u001c\u0010\u0095\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u00a2\u0006\u0002\u0010d\u001a3\u0010\u0095\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00a2\u0006\u0002\u0010`\u001a\u001c\u0010\u0095\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+\u00a2\u0006\u0002\u0010/\u001a3\u0010\u0095\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00a2\u0006\u0002\u0010b\u001a*\u0010\u0096\u0001\u001a\u00020$\"\t\b\u0000\u0010\u0002\u00a2\u0006\u0002\b5*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00106\u001a\u0002H\u0002\u00a2\u0006\u0003\u0010\u0001\u001a*\u0010\u0096\u0001\u001a\u00020$\"\t\b\u0000\u0010\u0002\u00a2\u0006\u0002\b5*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u00106\u001a\u0002H\u0002\u00a2\u0006\u0003\u0010\u0081\u0001\u001a\u001e\u0010\u0097\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u00a2\u0006\u0002\u0010d\u001a5\u0010\u0097\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00a2\u0006\u0002\u0010`\u001a\u001e\u0010\u0097\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+\u00a2\u0006\u0002\u0010/\u001a5\u0010\u0097\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00a2\u0006\u0002\u0010b\u001a:\u0010\u0098\u0001\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u000e\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0086\b\u001aO\u0010\u0099\u0001\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032'\u0010\u000e\u001a#\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0MH\u0086\b\u001aU\u0010\u009a\u0001\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010-*\u00020Z*\b\u0012\u0004\u0012\u0002H\u00020\u00032)\u0010\u000e\u001a%\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0MH\u0086\b\u001an\u0010\u009b\u0001\u001a\u0002HQ\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010-*\u00020Z\"\u0010\b\u0002\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H-0R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ2)\u0010\u000e\u001a%\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0MH\u0086\b\u00a2\u0006\u0002\u0010S\u001ah\u0010\u009c\u0001\u001a\u0002HQ\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0010\b\u0002\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H-0R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ2'\u0010\u000e\u001a#\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0MH\u0086\b\u00a2\u0006\u0002\u0010S\u001a@\u0010\u009d\u0001\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010-*\u00020Z*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0014\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\b\u001aY\u0010\u009e\u0001\u001a\u0002HQ\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010-*\u00020Z\"\u0010\b\u0002\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H-0R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ2\u0014\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\b\u00a2\u0006\u0002\u0010]\u001aS\u0010\u009f\u0001\u001a\u0002HQ\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0010\b\u0002\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H-0R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ2\u0012\u0010\u000e\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0086\b\u00a2\u0006\u0002\u0010]\u001a*\u0010\u00a0\u0001\u001a\u0004\u0018\u0001H\u0002\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u00a1\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u00a2\u0006\u0003\u0010\u00a2\u0001\u001a\u001b\u0010\u00a0\u0001\u001a\u0004\u0018\u00010\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007\u00a2\u0006\u0003\u0010\u00a3\u0001\u001a\u001b\u0010\u00a0\u0001\u001a\u0004\u0018\u00010\"*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007\u00a2\u0006\u0003\u0010\u00a4\u0001\u001aF\u0010\u00a5\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u00a1\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0086\b\u00a2\u0006\u0002\u0010`\u001a>\u0010\u00a6\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010\u00a7\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020\u00a8\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`\u00a9\u0001\u00a2\u0006\u0003\u0010\u00aa\u0001\u001a*\u0010\u00ab\u0001\u001a\u0004\u0018\u0001H\u0002\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u00a1\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u00a2\u0006\u0003\u0010\u00a2\u0001\u001a\u001b\u0010\u00ab\u0001\u001a\u0004\u0018\u00010\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007\u00a2\u0006\u0003\u0010\u00a3\u0001\u001a\u001b\u0010\u00ab\u0001\u001a\u0004\u0018\u00010\"*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007\u00a2\u0006\u0003\u0010\u00a4\u0001\u001aF\u0010\u00ac\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u00a1\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0086\b\u00a2\u0006\u0002\u0010`\u001a>\u0010\u00ad\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010\u00a7\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020\u00a8\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`\u00a9\u0001\u00a2\u0006\u0003\u0010\u00aa\u0001\u001a.\u0010\u00ae\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00106\u001a\u0002H\u0002H\u0086\u0002\u00a2\u0006\u0003\u0010\u00af\u0001\u001a8\u0010\u00ae\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0010\u0010\u00b0\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H\u00020\u00b1\u0001H\u0086\u0002\u00a2\u0006\u0003\u0010\u00b2\u0001\u001a/\u0010\u00ae\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u00b0\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0002\u001a/\u0010\u00ae\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u00b0\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\tH\u0086\u0002\u001a.\u0010\u00b3\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00106\u001a\u0002H\u0002H\u0087\b\u00a2\u0006\u0003\u0010\u00af\u0001\u001a\u0017\u0010\u00b4\u0001\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a.\u0010\u00b4\u0001\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a>\u0010\u00b5\u0001\u001a\u0002HQ\"\u0004\b\u0000\u0010\u0002\"\u000e\b\u0001\u0010Q*\b\u0012\u0004\u0012\u0002H\u00020\u0003*\u0002HQ2\u0012\u0010v\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020u0\u0005H\u0087\b\u00a2\u0006\u0003\u0010\u00b6\u0001\u001aF\u0010\u00b7\u0001\u001a\u001a\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+0\u000f\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a.\u0010\u00b8\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u0002092\u0006\u00106\u001a\u0002H\u0002H\u0086\u0002\u00a2\u0006\u0003\u0010\u00b9\u0001\u001a8\u0010\u00b8\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u0002092\u0010\u0010\u00b0\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H\u00020\u00b1\u0001H\u0086\u0002\u00a2\u0006\u0003\u0010\u00ba\u0001\u001a/\u0010\u00b8\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u0002092\r\u0010\u00b0\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0002\u001a/\u0010\u00b8\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u0002092\r\u0010\u00b0\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\tH\u0086\u0002\u001a.\u0010\u00b8\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00106\u001a\u0002H\u0002H\u0086\u0002\u00a2\u0006\u0003\u0010\u00af\u0001\u001a8\u0010\u00b8\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0010\u0010\u00b0\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H\u00020\u00b1\u0001H\u0086\u0002\u00a2\u0006\u0003\u0010\u00b2\u0001\u001a/\u0010\u00b8\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u00b0\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0002\u001a/\u0010\u00b8\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u00b0\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\tH\u0086\u0002\u001a.\u0010\u00bb\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u0002092\u0006\u00106\u001a\u0002H\u0002H\u0087\b\u00a2\u0006\u0003\u0010\u00b9\u0001\u001a.\u0010\u00bb\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00106\u001a\u0002H\u0002H\u0087\b\u00a2\u0006\u0003\u0010\u00af\u0001\u001a \u0010\u00bc\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u000209H\u0087\b\u00a2\u0006\u0003\u0010\u00bd\u0001\u001a)\u0010\u00bc\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u0002092\b\u0010\u00bc\u0001\u001a\u00030\u00be\u0001H\u0007\u00a2\u0006\u0003\u0010\u00bf\u0001\u001a\"\u0010\u00c0\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u000209H\u0087\b\u00a2\u0006\u0003\u0010\u00bd\u0001\u001a+\u0010\u00c0\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u0002092\b\u0010\u00bc\u0001\u001a\u00030\u00be\u0001H\u0007\u00a2\u0006\u0003\u0010\u00bf\u0001\u001aX\u0010\u00c1\u0001\u001a\u0003H\u00c2\u0001\"\u0005\b\u0000\u0010\u00c2\u0001\"\t\b\u0001\u0010\u0002*\u0003H\u00c2\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032)\u0010j\u001a%\u0012\u0014\u0012\u0012H\u00c2\u0001\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(k\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003H\u00c2\u00010MH\u0086\b\u00a2\u0006\u0003\u0010\u00c3\u0001\u001am\u0010\u00c4\u0001\u001a\u0003H\u00c2\u0001\"\u0005\b\u0000\u0010\u00c2\u0001\"\t\b\u0001\u0010\u0002*\u0003H\u00c2\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032>\u0010j\u001a:\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0014\u0012\u0012H\u00c2\u0001\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(k\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003H\u00c2\u00010nH\u0086\b\u00a2\u0006\u0003\u0010\u00c5\u0001\u001aZ\u0010\u00c6\u0001\u001a\u0005\u0018\u0001H\u00c2\u0001\"\u0005\b\u0000\u0010\u00c2\u0001\"\t\b\u0001\u0010\u0002*\u0003H\u00c2\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032)\u0010j\u001a%\u0012\u0014\u0012\u0012H\u00c2\u0001\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(k\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003H\u00c2\u00010MH\u0087\b\u00a2\u0006\u0003\u0010\u00c3\u0001\u001aX\u0010\u00c7\u0001\u001a\u0003H\u00c2\u0001\"\u0005\b\u0000\u0010\u00c2\u0001\"\t\b\u0001\u0010\u0002*\u0003H\u00c2\u0001*\b\u0012\u0004\u0012\u0002H\u00020+2)\u0010j\u001a%\u0012\u0004\u0012\u0002H\u0002\u0012\u0014\u0012\u0012H\u00c2\u0001\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(k\u0012\u0005\u0012\u0003H\u00c2\u00010MH\u0086\b\u00a2\u0006\u0003\u0010\u00c8\u0001\u001am\u0010\u00c9\u0001\u001a\u0003H\u00c2\u0001\"\u0005\b\u0000\u0010\u00c2\u0001\"\t\b\u0001\u0010\u0002*\u0003H\u00c2\u0001*\b\u0012\u0004\u0012\u0002H\u00020+2>\u0010j\u001a:\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0014\u0012\u0012H\u00c2\u0001\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(k\u0012\u0005\u0012\u0003H\u00c2\u00010nH\u0086\b\u00a2\u0006\u0003\u0010\u00ca\u0001\u001aZ\u0010\u00cb\u0001\u001a\u0005\u0018\u0001H\u00c2\u0001\"\u0005\b\u0000\u0010\u00c2\u0001\"\t\b\u0001\u0010\u0002*\u0003H\u00c2\u0001*\b\u0012\u0004\u0012\u0002H\u00020+2)\u0010j\u001a%\u0012\u0004\u0012\u0002H\u0002\u0012\u0014\u0012\u0012H\u00c2\u0001\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(k\u0012\u0005\u0012\u0003H\u00c2\u00010MH\u0087\b\u00a2\u0006\u0003\u0010\u00c8\u0001\u001a#\u0010\u00cc\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\b\b\u0000\u0010\u0002*\u00020Z*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u0003\u001a#\u0010\u00cc\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\b\b\u0000\u0010\u0002*\u00020Z*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020+\u001a\u001d\u0010\u00cd\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a]\u0010\u00ce\u0001\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010i\u001a\u0002H-2'\u0010j\u001a#\u0012\u0013\u0012\u0011H-\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(k\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0MH\u0087\b\u00a2\u0006\u0003\u0010\u00cf\u0001\u001ar\u0010\u00d0\u0001\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010i\u001a\u0002H-2<\u0010j\u001a8\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0013\u0012\u0011H-\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(k\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0nH\u0087\b\u00a2\u0006\u0003\u0010\u00d1\u0001\u001aX\u0010\u00d2\u0001\u001a\t\u0012\u0005\u0012\u0003H\u00c2\u00010+\"\u0005\b\u0000\u0010\u00c2\u0001\"\t\b\u0001\u0010\u0002*\u0003H\u00c2\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032)\u0010j\u001a%\u0012\u0014\u0012\u0012H\u00c2\u0001\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(k\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003H\u00c2\u00010MH\u0087\b\u001am\u0010\u00d3\u0001\u001a\t\u0012\u0005\u0012\u0003H\u00c2\u00010+\"\u0005\b\u0000\u0010\u00c2\u0001\"\t\b\u0001\u0010\u0002*\u0003H\u00c2\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032>\u0010j\u001a:\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0014\u0012\u0012H\u00c2\u0001\u00a2\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(k\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003H\u00c2\u00010nH\u0087\b\u001a\u001c\u0010\u00d4\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u00a2\u0006\u0002\u0010d\u001a3\u0010\u00d4\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00a2\u0006\u0002\u0010`\u001a\u001c\u0010\u00d4\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+\u00a2\u0006\u0002\u0010/\u001a\u001e\u0010\u00d5\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u00a2\u0006\u0002\u0010d\u001a5\u0010\u00d5\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00a2\u0006\u0002\u0010`\u001a\u001e\u0010\u00d5\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+\u00a2\u0006\u0002\u0010/\u001a,\u0010\u00d6\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\r\u0010\u00d7\u0001\u001a\b\u0012\u0004\u0012\u00020$0\u0003\u001a'\u0010\u00d6\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\b\u0010\u00d7\u0001\u001a\u00030\u00d8\u0001\u001aC\u0010\u00d9\u0001\u001a\u00020u\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u00a1\u0001*\b\u0012\u0004\u0012\u0002H\u00020|2\u0016\b\u0004\u0010<\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\b\u001aC\u0010\u00da\u0001\u001a\u00020u\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u00a1\u0001*\b\u0012\u0004\u0012\u0002H\u00020|2\u0016\b\u0004\u0010<\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\b\u001a\"\u0010\u00db\u0001\u001a\u00020u\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u00a1\u0001*\b\u0012\u0004\u0012\u0002H\u00020|\u001a(\u0010\u00dc\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u00a1\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001aI\u0010\u00dd\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u00a1\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0016\b\u0004\u0010<\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\b\u001aI\u0010\u00de\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u00a1\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0016\b\u0004\u0010<\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\b\u001a(\u0010\u00df\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u00a1\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a<\u0010\u00e0\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010\u00a7\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020\u00a8\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`\u00a9\u0001\u001a0\u0010\u00e1\u0001\u001a\t\u0012\u0004\u0012\u0002H\u00020\u0085\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u0086\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0004\u001a\u0019\u0010\u00e2\u0001\u001a\u00020$*\b\u0012\u0004\u0012\u00020\u001f0\u0003H\u0007\u00a2\u0006\u0003\b\u00e3\u0001\u001a\u0019\u0010\u00e2\u0001\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007\u00a2\u0006\u0003\b\u00e4\u0001\u001a\u0019\u0010\u00e2\u0001\u001a\u00020\"*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007\u00a2\u0006\u0003\b\u00e5\u0001\u001a\u0019\u0010\u00e2\u0001\u001a\u00020$*\b\u0012\u0004\u0012\u00020$0\u0003H\u0007\u00a2\u0006\u0003\b\u00e6\u0001\u001a\u0019\u0010\u00e2\u0001\u001a\u00020&*\b\u0012\u0004\u0012\u00020&0\u0003H\u0007\u00a2\u0006\u0003\b\u00e7\u0001\u001a\u0019\u0010\u00e2\u0001\u001a\u00020$*\b\u0012\u0004\u0012\u00020(0\u0003H\u0007\u00a2\u0006\u0003\b\u00e8\u0001\u001a.\u0010\u00e9\u0001\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020$0\u0005H\u0086\b\u001a.\u0010\u00ea\u0001\u001a\u00020\u001e\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u001e0\u0005H\u0086\b\u001a%\u0010\u00eb\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010>\u001a\u00020$\u001a%\u0010\u00ec\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010>\u001a\u00020$\u001a4\u0010\u00ed\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a4\u0010\u00ee\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a\u0012\u0010\u00ef\u0001\u001a\u00030\u00f0\u0001*\b\u0012\u0004\u0012\u00020\u000109\u001a\u0012\u0010\u00f1\u0001\u001a\u00030\u00f2\u0001*\b\u0012\u0004\u0012\u00020\u001f09\u001a\u0013\u0010\u00f3\u0001\u001a\u00030\u00f4\u0001*\t\u0012\u0005\u0012\u00030\u00f5\u000109\u001a6\u0010\u00f6\u0001\u001a\u0002HQ\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ\u00a2\u0006\u0002\u0010W\u001a\u0012\u0010\u00f7\u0001\u001a\u00030\u00f8\u0001*\b\u0012\u0004\u0012\u00020\u001e09\u001a\u0012\u0010\u00f9\u0001\u001a\u00030\u00fa\u0001*\b\u0012\u0004\u0012\u00020\"09\u001a)\u0010\u00fb\u0001\u001a\u0014\u0012\u0004\u0012\u0002H\u00020\u00fc\u0001j\t\u0012\u0004\u0012\u0002H\u0002`\u00fd\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u0012\u0010\u00fe\u0001\u001a\u00030\u00ff\u0001*\b\u0012\u0004\u0012\u00020$09\u001a\u001d\u0010\u0002\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u0012\u0010\u0081\u0002\u001a\u00030\u0082\u0002*\b\u0012\u0004\u0012\u00020&09\u001a\u001d\u0010\u0083\u0002\u001a\b\u0012\u0004\u0012\u0002H\u00020|\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u000209\u001a\u001d\u0010\u0083\u0002\u001a\b\u0012\u0004\u0012\u0002H\u00020|\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001e\u0010\u0084\u0002\u001a\t\u0012\u0004\u0012\u0002H\u00020\u0085\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001e\u0010\u0086\u0002\u001a\t\u0012\u0004\u0012\u0002H\u00020\u0085\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u0012\u0010\u0087\u0002\u001a\u00030\u0088\u0002*\b\u0012\u0004\u0012\u00020(09\u001a0\u0010\u0089\u0002\u001a\t\u0012\u0004\u0012\u0002H\u00020\u0085\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u0086\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0004\u001aC\u0010\u008a\u0002\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+0+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010,\u001a\u00020$2\t\b\u0002\u0010\u008b\u0002\u001a\u00020$2\t\b\u0002\u0010\u008c\u0002\u001a\u00020\u0001H\u0007\u001a]\u0010\u008a\u0002\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010,\u001a\u00020$2\t\b\u0002\u0010\u008b\u0002\u001a\u00020$2\t\b\u0002\u0010\u008c\u0002\u001a\u00020\u00012\u0018\u0010\u000e\u001a\u0014\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+\u0012\u0004\u0012\u0002H-0\u0005H\u0007\u001a$\u0010\u008d\u0002\u001a\u000f\u0012\u000b\u0012\t\u0012\u0004\u0012\u0002H\u00020\u008e\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001aJ\u0010\u008f\u0002\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u000f0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0010\u0010\u0086\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H-0\u00b1\u0001H\u0086\u0004\u00a2\u0006\u0003\u0010\u00b2\u0001\u001a~\u0010\u008f\u0002\u001a\b\u0012\u0004\u0012\u0002H\r0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0010\u0010\u0086\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H-0\u00b1\u000128\u0010\u000e\u001a4\u0012\u0014\u0012\u0012H\u0002\u00a2\u0006\r\bN\u0012\t\bO\u0012\u0005\b\b(\u0090\u0002\u0012\u0014\u0012\u0012H-\u00a2\u0006\r\bN\u0012\t\bO\u0012\u0005\b\b(\u0091\u0002\u0012\u0004\u0012\u0002H\r0MH\u0086\b\u00a2\u0006\u0003\u0010\u0092\u0002\u001aA\u0010\u008f\u0002\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u000f0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u0086\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003H\u0086\u0004\u001au\u0010\u008f\u0002\u001a\b\u0012\u0004\u0012\u0002H\r0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u0086\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u000328\u0010\u000e\u001a4\u0012\u0014\u0012\u0012H\u0002\u00a2\u0006\r\bN\u0012\t\bO\u0012\u0005\b\b(\u0090\u0002\u0012\u0014\u0012\u0012H-\u00a2\u0006\r\bN\u0012\t\bO\u0012\u0005\b\b(\u0091\u0002\u0012\u0004\u0012\u0002H\r0MH\u0086\b\u001a+\u0010\u0093\u0002\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\u00020\u000f0+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0007\u001a`\u0010\u0093\u0002\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u000328\u0010\u000e\u001a4\u0012\u0014\u0012\u0012H\u0002\u00a2\u0006\r\bN\u0012\t\bO\u0012\u0005\b\b(\u0090\u0002\u0012\u0014\u0012\u0012H\u0002\u00a2\u0006\r\bN\u0012\t\bO\u0012\u0005\b\b(\u0091\u0002\u0012\u0004\u0012\u0002H-0MH\u0087\b\u00a8\u0006\u0094\u0002"}, d2={"all", "", "T", "", "predicate", "Lkotlin/Function1;", "any", "asIterable", "asSequence", "Lkotlin/sequences/Sequence;", "associate", "", "K", "V", "transform", "Lkotlin/Pair;", "associateBy", "keySelector", "valueTransform", "associateByTo", "M", "", "destination", "(Ljava/lang/Iterable;Ljava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "(Ljava/lang/Iterable;Ljava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "associateTo", "associateWith", "valueSelector", "associateWithTo", "average", "", "", "averageOfByte", "averageOfDouble", "", "averageOfFloat", "", "averageOfInt", "", "averageOfLong", "", "averageOfShort", "chunked", "", "size", "R", "component1", "(Ljava/util/List;)Ljava/lang/Object;", "component2", "component3", "component4", "component5", "contains", "Lkotlin/internal/OnlyInputTypes;", "element", "(Ljava/lang/Iterable;Ljava/lang/Object;)Z", "count", "", "distinct", "distinctBy", "selector", "drop", "n", "dropLast", "dropLastWhile", "dropWhile", "elementAt", "index", "(Ljava/lang/Iterable;I)Ljava/lang/Object;", "(Ljava/util/List;I)Ljava/lang/Object;", "elementAtOrElse", "defaultValue", "(Ljava/lang/Iterable;ILkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "(Ljava/util/List;ILkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "elementAtOrNull", "filter", "filterIndexed", "Lkotlin/Function2;", "Lkotlin/ParameterName;", "name", "filterIndexedTo", "C", "", "(Ljava/lang/Iterable;Ljava/util/Collection;Lkotlin/jvm/functions/Function2;)Ljava/util/Collection;", "filterIsInstance", "Lkotlin/internal/NoInfer;", "filterIsInstanceTo", "(Ljava/lang/Iterable;Ljava/util/Collection;)Ljava/util/Collection;", "filterNot", "filterNotNull", "", "filterNotNullTo", "filterNotTo", "(Ljava/lang/Iterable;Ljava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;", "filterTo", "find", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "findLast", "(Ljava/util/List;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "first", "(Ljava/lang/Iterable;)Ljava/lang/Object;", "firstOrNull", "flatMap", "flatMapTo", "fold", "initial", "operation", "acc", "(Ljava/lang/Iterable;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "foldIndexed", "Lkotlin/Function3;", "(Ljava/lang/Iterable;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "foldRight", "(Ljava/util/List;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "foldRightIndexed", "(Ljava/util/List;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "forEach", "", "action", "forEachIndexed", "getOrElse", "getOrNull", "groupBy", "groupByTo", "", "groupingBy", "Lkotlin/collections/Grouping;", "indexOf", "(Ljava/lang/Iterable;Ljava/lang/Object;)I", "(Ljava/util/List;Ljava/lang/Object;)I", "indexOfFirst", "indexOfLast", "intersect", "", "other", "joinTo", "A", "Ljava/lang/Appendable;", "Lkotlin/text/Appendable;", "buffer", "separator", "", "prefix", "postfix", "limit", "truncated", "(Ljava/lang/Iterable;Ljava/lang/Appendable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Appendable;", "joinToString", "", "last", "lastIndexOf", "lastOrNull", "map", "mapIndexed", "mapIndexedNotNull", "mapIndexedNotNullTo", "mapIndexedTo", "mapNotNull", "mapNotNullTo", "mapTo", "max", "", "(Ljava/lang/Iterable;)Ljava/lang/Comparable;", "(Ljava/lang/Iterable;)Ljava/lang/Double;", "(Ljava/lang/Iterable;)Ljava/lang/Float;", "maxBy", "maxWith", "comparator", "Ljava/util/Comparator;", "Lkotlin/Comparator;", "(Ljava/lang/Iterable;Ljava/util/Comparator;)Ljava/lang/Object;", "min", "minBy", "minWith", "minus", "(Ljava/lang/Iterable;Ljava/lang/Object;)Ljava/util/List;", "elements", "", "(Ljava/lang/Iterable;[Ljava/lang/Object;)Ljava/util/List;", "minusElement", "none", "onEach", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Ljava/lang/Iterable;", "partition", "plus", "(Ljava/util/Collection;Ljava/lang/Object;)Ljava/util/List;", "(Ljava/util/Collection;[Ljava/lang/Object;)Ljava/util/List;", "plusElement", "random", "(Ljava/util/Collection;)Ljava/lang/Object;", "Lkotlin/random/Random;", "(Ljava/util/Collection;Lkotlin/random/Random;)Ljava/lang/Object;", "randomOrNull", "reduce", "S", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "reduceIndexed", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "reduceOrNull", "reduceRight", "(Ljava/util/List;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "reduceRightIndexed", "(Ljava/util/List;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "reduceRightOrNull", "requireNoNulls", "reversed", "scan", "(Ljava/lang/Iterable;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "scanIndexed", "(Ljava/lang/Iterable;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/util/List;", "scanReduce", "scanReduceIndexed", "single", "singleOrNull", "slice", "indices", "Lkotlin/ranges/IntRange;", "sortBy", "sortByDescending", "sortDescending", "sorted", "sortedBy", "sortedByDescending", "sortedDescending", "sortedWith", "subtract", "sum", "sumOfByte", "sumOfDouble", "sumOfFloat", "sumOfInt", "sumOfLong", "sumOfShort", "sumBy", "sumByDouble", "take", "takeLast", "takeLastWhile", "takeWhile", "toBooleanArray", "", "toByteArray", "", "toCharArray", "", "", "toCollection", "toDoubleArray", "", "toFloatArray", "", "toHashSet", "Ljava/util/HashSet;", "Lkotlin/collections/HashSet;", "toIntArray", "", "toList", "toLongArray", "", "toMutableList", "toMutableSet", "", "toSet", "toShortArray", "", "union", "windowed", "step", "partialWindows", "withIndex", "Lkotlin/collections/IndexedValue;", "zip", "a", "b", "(Ljava/lang/Iterable;[Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "zipWithNext", "kotlin-stdlib"}, k=5, mv={1, 1, 16}, xi=1, xs="kotlin/collections/CollectionsKt")
class CollectionsKt___CollectionsKt
extends CollectionsKt___CollectionsJvmKt {
    public static final <T> boolean all(Iterable<? extends T> object, Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(object, "$this$all");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        if (object instanceof Collection && ((Collection)object).isEmpty()) {
            return true;
        }
        object = object.iterator();
        do {
            if (!object.hasNext()) return true;
        } while (function1.invoke(object.next()).booleanValue());
        return false;
    }

    public static final <T> boolean any(Iterable<? extends T> iterable) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$any");
        if (!(iterable instanceof Collection)) return iterable.iterator().hasNext();
        return ((Collection)iterable).isEmpty() ^ true;
    }

    public static final <T> boolean any(Iterable<? extends T> object, Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(object, "$this$any");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        if (object instanceof Collection && ((Collection)object).isEmpty()) {
            return false;
        }
        object = object.iterator();
        do {
            if (!object.hasNext()) return false;
        } while (!function1.invoke(object.next()).booleanValue());
        return true;
    }

    private static final <T> Iterable<T> asIterable(Iterable<? extends T> iterable) {
        return iterable;
    }

    public static final <T> Sequence<T> asSequence(Iterable<? extends T> iterable) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$asSequence");
        return new Sequence<T>(iterable){
            final /* synthetic */ Iterable $this_asSequence$inlined;
            {
                this.$this_asSequence$inlined = iterable;
            }

            public Iterator<T> iterator() {
                return this.$this_asSequence$inlined.iterator();
            }
        };
    }

    public static final <T, K, V> Map<K, V> associate(Iterable<? extends T> object, Function1<? super T, ? extends Pair<? extends K, ? extends V>> function1) {
        Intrinsics.checkParameterIsNotNull(object, "$this$associate");
        Intrinsics.checkParameterIsNotNull(function1, "transform");
        Map map = new LinkedHashMap(RangesKt.coerceAtLeast(MapsKt.mapCapacity(CollectionsKt.collectionSizeOrDefault(object, 10)), 16));
        Iterator<T> iterator2 = object.iterator();
        while (iterator2.hasNext()) {
            object = function1.invoke(iterator2.next());
            map.put(((Pair)object).getFirst(), ((Pair)object).getSecond());
        }
        return map;
    }

    public static final <T, K> Map<K, T> associateBy(Iterable<? extends T> object, Function1<? super T, ? extends K> function1) {
        Intrinsics.checkParameterIsNotNull(object, "$this$associateBy");
        Intrinsics.checkParameterIsNotNull(function1, "keySelector");
        Map map = new LinkedHashMap(RangesKt.coerceAtLeast(MapsKt.mapCapacity(CollectionsKt.collectionSizeOrDefault(object, 10)), 16));
        object = object.iterator();
        while (object.hasNext()) {
            Object e = object.next();
            map.put(function1.invoke(e), e);
        }
        return map;
    }

    public static final <T, K, V> Map<K, V> associateBy(Iterable<? extends T> iterable, Function1<? super T, ? extends K> function1, Function1<? super T, ? extends V> function12) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$associateBy");
        Intrinsics.checkParameterIsNotNull(function1, "keySelector");
        Intrinsics.checkParameterIsNotNull(function12, "valueTransform");
        Map map = new LinkedHashMap(RangesKt.coerceAtLeast(MapsKt.mapCapacity(CollectionsKt.collectionSizeOrDefault(iterable, 10)), 16));
        Iterator<T> iterator2 = iterable.iterator();
        while (iterator2.hasNext()) {
            iterable = iterator2.next();
            map.put(function1.invoke(iterable), function12.invoke(iterable));
        }
        return map;
    }

    public static final <T, K, M extends Map<? super K, ? super T>> M associateByTo(Iterable<? extends T> iterable, M m, Function1<? super T, ? extends K> function1) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$associateByTo");
        Intrinsics.checkParameterIsNotNull(m, "destination");
        Intrinsics.checkParameterIsNotNull(function1, "keySelector");
        Iterator<T> iterator2 = iterable.iterator();
        while (iterator2.hasNext()) {
            iterable = iterator2.next();
            m.put(function1.invoke(iterable), iterable);
        }
        return m;
    }

    public static final <T, K, V, M extends Map<? super K, ? super V>> M associateByTo(Iterable<? extends T> iterable, M m, Function1<? super T, ? extends K> function1, Function1<? super T, ? extends V> function12) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$associateByTo");
        Intrinsics.checkParameterIsNotNull(m, "destination");
        Intrinsics.checkParameterIsNotNull(function1, "keySelector");
        Intrinsics.checkParameterIsNotNull(function12, "valueTransform");
        Iterator<T> iterator2 = iterable.iterator();
        while (iterator2.hasNext()) {
            iterable = iterator2.next();
            m.put(function1.invoke(iterable), function12.invoke(iterable));
        }
        return m;
    }

    public static final <T, K, V, M extends Map<? super K, ? super V>> M associateTo(Iterable<? extends T> object, M m, Function1<? super T, ? extends Pair<? extends K, ? extends V>> function1) {
        Intrinsics.checkParameterIsNotNull(object, "$this$associateTo");
        Intrinsics.checkParameterIsNotNull(m, "destination");
        Intrinsics.checkParameterIsNotNull(function1, "transform");
        Iterator<T> iterator2 = object.iterator();
        while (iterator2.hasNext()) {
            object = function1.invoke(iterator2.next());
            m.put(((Pair)object).getFirst(), ((Pair)object).getSecond());
        }
        return m;
    }

    public static final <K, V> Map<K, V> associateWith(Iterable<? extends K> object, Function1<? super K, ? extends V> function1) {
        Intrinsics.checkParameterIsNotNull(object, "$this$associateWith");
        Intrinsics.checkParameterIsNotNull(function1, "valueSelector");
        LinkedHashMap linkedHashMap = new LinkedHashMap(RangesKt.coerceAtLeast(MapsKt.mapCapacity(CollectionsKt.collectionSizeOrDefault(object, 10)), 16));
        object = object.iterator();
        while (object.hasNext()) {
            Object e = object.next();
            ((Map)linkedHashMap).put(e, function1.invoke(e));
        }
        return linkedHashMap;
    }

    public static final <K, V, M extends Map<? super K, ? super V>> M associateWithTo(Iterable<? extends K> iterable, M m, Function1<? super K, ? extends V> function1) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$associateWithTo");
        Intrinsics.checkParameterIsNotNull(m, "destination");
        Intrinsics.checkParameterIsNotNull(function1, "valueSelector");
        Iterator<K> iterator2 = iterable.iterator();
        while (iterator2.hasNext()) {
            iterable = iterator2.next();
            m.put(iterable, function1.invoke(iterable));
        }
        return m;
    }

    public static final double averageOfByte(Iterable<Byte> object) {
        Intrinsics.checkParameterIsNotNull(object, "$this$average");
        object = object.iterator();
        double d = 0.0;
        int n = 0;
        while (object.hasNext()) {
            double d2 = d + (double)((Number)object.next()).byteValue();
            int n2 = n + 1;
            d = d2;
            n = n2;
            if (n2 >= 0) continue;
            CollectionsKt.throwCountOverflow();
            d = d2;
            n = n2;
        }
        if (n == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        d /= (double)n;
        return d;
    }

    public static final double averageOfDouble(Iterable<Double> object) {
        Intrinsics.checkParameterIsNotNull(object, "$this$average");
        object = object.iterator();
        double d = 0.0;
        int n = 0;
        while (object.hasNext()) {
            double d2 = d + ((Number)object.next()).doubleValue();
            int n2 = n + 1;
            d = d2;
            n = n2;
            if (n2 >= 0) continue;
            CollectionsKt.throwCountOverflow();
            d = d2;
            n = n2;
        }
        if (n == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        d /= (double)n;
        return d;
    }

    public static final double averageOfFloat(Iterable<Float> object) {
        Intrinsics.checkParameterIsNotNull(object, "$this$average");
        object = object.iterator();
        double d = 0.0;
        int n = 0;
        while (object.hasNext()) {
            double d2 = d + (double)((Number)object.next()).floatValue();
            int n2 = n + 1;
            d = d2;
            n = n2;
            if (n2 >= 0) continue;
            CollectionsKt.throwCountOverflow();
            d = d2;
            n = n2;
        }
        if (n == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        d /= (double)n;
        return d;
    }

    public static final double averageOfInt(Iterable<Integer> object) {
        Intrinsics.checkParameterIsNotNull(object, "$this$average");
        object = object.iterator();
        double d = 0.0;
        int n = 0;
        while (object.hasNext()) {
            double d2 = d + (double)((Number)object.next()).intValue();
            int n2 = n + 1;
            d = d2;
            n = n2;
            if (n2 >= 0) continue;
            CollectionsKt.throwCountOverflow();
            d = d2;
            n = n2;
        }
        if (n == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        d /= (double)n;
        return d;
    }

    public static final double averageOfLong(Iterable<Long> object) {
        Intrinsics.checkParameterIsNotNull(object, "$this$average");
        object = object.iterator();
        double d = 0.0;
        int n = 0;
        while (object.hasNext()) {
            double d2 = d + (double)((Number)object.next()).longValue();
            int n2 = n + 1;
            d = d2;
            n = n2;
            if (n2 >= 0) continue;
            CollectionsKt.throwCountOverflow();
            d = d2;
            n = n2;
        }
        if (n == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        d /= (double)n;
        return d;
    }

    public static final double averageOfShort(Iterable<Short> object) {
        Intrinsics.checkParameterIsNotNull(object, "$this$average");
        object = object.iterator();
        double d = 0.0;
        int n = 0;
        while (object.hasNext()) {
            double d2 = d + (double)((Number)object.next()).shortValue();
            int n2 = n + 1;
            d = d2;
            n = n2;
            if (n2 >= 0) continue;
            CollectionsKt.throwCountOverflow();
            d = d2;
            n = n2;
        }
        if (n == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        d /= (double)n;
        return d;
    }

    public static final <T> List<List<T>> chunked(Iterable<? extends T> iterable, int n) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$chunked");
        return CollectionsKt.windowed(iterable, n, n, true);
    }

    public static final <T, R> List<R> chunked(Iterable<? extends T> iterable, int n, Function1<? super List<? extends T>, ? extends R> function1) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$chunked");
        Intrinsics.checkParameterIsNotNull(function1, "transform");
        return CollectionsKt.windowed(iterable, n, n, true, function1);
    }

    private static final <T> T component1(List<? extends T> list) {
        Intrinsics.checkParameterIsNotNull(list, "$this$component1");
        return list.get(0);
    }

    private static final <T> T component2(List<? extends T> list) {
        Intrinsics.checkParameterIsNotNull(list, "$this$component2");
        return list.get(1);
    }

    private static final <T> T component3(List<? extends T> list) {
        Intrinsics.checkParameterIsNotNull(list, "$this$component3");
        return list.get(2);
    }

    private static final <T> T component4(List<? extends T> list) {
        Intrinsics.checkParameterIsNotNull(list, "$this$component4");
        return list.get(3);
    }

    private static final <T> T component5(List<? extends T> list) {
        Intrinsics.checkParameterIsNotNull(list, "$this$component5");
        return list.get(4);
    }

    public static final <T> boolean contains(Iterable<? extends T> iterable, T t) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$contains");
        if (iterable instanceof Collection) {
            return ((Collection)iterable).contains(t);
        }
        if (CollectionsKt.indexOf(iterable, t) < 0) return false;
        return true;
    }

    public static final <T> int count(Iterable<? extends T> object) {
        Intrinsics.checkParameterIsNotNull(object, "$this$count");
        if (object instanceof Collection) {
            return ((Collection)object).size();
        }
        int n = 0;
        object = object.iterator();
        while (object.hasNext()) {
            int n2;
            object.next();
            n = n2 = n + 1;
            if (n2 >= 0) continue;
            CollectionsKt.throwCountOverflow();
            n = n2;
        }
        return n;
    }

    public static final <T> int count(Iterable<? extends T> object, Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(object, "$this$count");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        if (object instanceof Collection && ((Collection)object).isEmpty()) {
            return 0;
        }
        object = object.iterator();
        int n = 0;
        while (object.hasNext()) {
            int n2;
            if (!function1.invoke(object.next()).booleanValue()) continue;
            n = n2 = n + 1;
            if (n2 >= 0) continue;
            if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) throw (Throwable)new ArithmeticException("Count overflow has happened.");
            CollectionsKt.throwCountOverflow();
            n = n2;
        }
        return n;
    }

    private static final <T> int count(Collection<? extends T> collection) {
        return collection.size();
    }

    public static final <T> List<T> distinct(Iterable<? extends T> iterable) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$distinct");
        return CollectionsKt.toList((Iterable)CollectionsKt.toMutableSet(iterable));
    }

    public static final <T, K> List<T> distinctBy(Iterable<? extends T> iterable, Function1<? super T, ? extends K> function1) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$distinctBy");
        Intrinsics.checkParameterIsNotNull(function1, "selector");
        HashSet<K> hashSet = new HashSet<K>();
        ArrayList<Iterable<T>> arrayList = new ArrayList<Iterable<T>>();
        Iterator<T> iterator2 = iterable.iterator();
        while (iterator2.hasNext()) {
            iterable = iterator2.next();
            if (!hashSet.add(function1.invoke(iterable))) continue;
            arrayList.add(iterable);
        }
        return arrayList;
    }

    public static final <T> List<T> drop(Iterable<? extends T> object, int n) {
        Object object2;
        Object object3;
        Intrinsics.checkParameterIsNotNull(object, "$this$drop");
        int n2 = 0;
        int n3 = n >= 0 ? 1 : 0;
        if (n3 == 0) {
            object = new StringBuilder();
            ((StringBuilder)object).append("Requested element count ");
            ((StringBuilder)object).append(n);
            ((StringBuilder)object).append(" is less than zero.");
            throw (Throwable)new IllegalArgumentException(((StringBuilder)object).toString().toString());
        }
        if (n == 0) {
            return CollectionsKt.toList(object);
        }
        if (object instanceof Collection) {
            Collection collection = (Collection)object;
            n3 = collection.size() - n;
            if (n3 <= 0) {
                return CollectionsKt.emptyList();
            }
            if (n3 == 1) {
                return CollectionsKt.listOf(CollectionsKt.last(object));
            }
            object2 = object3 = new ArrayList(n3);
            if (object instanceof List) {
                if (object instanceof RandomAccess) {
                    n3 = collection.size();
                    while (n < n3) {
                        ((ArrayList)object3).add(((List)object).get(n));
                        ++n;
                    }
                    return (List)object3;
                }
                object = ((List)object).listIterator(n);
                while (object.hasNext()) {
                    ((ArrayList)object3).add(object.next());
                }
                return (List)object3;
            }
        } else {
            object2 = new ArrayList<Object>();
        }
        object3 = object.iterator();
        n3 = n2;
        while (object3.hasNext()) {
            object = object3.next();
            if (n3 >= n) {
                ((ArrayList)object2).add(object);
                continue;
            }
            ++n3;
        }
        return CollectionsKt.optimizeReadOnlyList((List)object2);
    }

    public static final <T> List<T> dropLast(List<? extends T> object, int n) {
        Intrinsics.checkParameterIsNotNull(object, "$this$dropLast");
        boolean bl = n >= 0;
        if (bl) {
            return CollectionsKt.take((Iterable)object, RangesKt.coerceAtLeast(object.size() - n, 0));
        }
        object = new StringBuilder();
        ((StringBuilder)object).append("Requested element count ");
        ((StringBuilder)object).append(n);
        ((StringBuilder)object).append(" is less than zero.");
        throw (Throwable)new IllegalArgumentException(((StringBuilder)object).toString().toString());
    }

    public static final <T> List<T> dropLastWhile(List<? extends T> list, Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(list, "$this$dropLastWhile");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        if (list.isEmpty()) return CollectionsKt.emptyList();
        ListIterator<T> listIterator = list.listIterator(list.size());
        do {
            if (!listIterator.hasPrevious()) return CollectionsKt.emptyList();
        } while (function1.invoke(listIterator.previous()).booleanValue());
        return CollectionsKt.take((Iterable)list, listIterator.nextIndex() + 1);
    }

    public static final <T> List<T> dropWhile(Iterable<? extends T> iterable, Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$dropWhile");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        ArrayList<Iterable<T>> arrayList = new ArrayList<Iterable<T>>();
        Iterator<T> iterator2 = iterable.iterator();
        boolean bl = false;
        while (iterator2.hasNext()) {
            iterable = iterator2.next();
            if (bl) {
                arrayList.add(iterable);
                continue;
            }
            if (function1.invoke(iterable).booleanValue()) continue;
            arrayList.add(iterable);
            bl = true;
        }
        return arrayList;
    }

    public static final <T> T elementAt(Iterable<? extends T> iterable, int n) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$elementAt");
        if (!(iterable instanceof List)) return CollectionsKt.elementAtOrElse(iterable, n, (Function1)new Function1(n){
            final /* synthetic */ int $index;
            {
                this.$index = n;
                super(1);
            }

            public final java.lang.Void invoke(int n) {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Collection doesn't contain element at index ");
                stringBuilder.append(this.$index);
                stringBuilder.append('.');
                throw (Throwable)new java.lang.IndexOutOfBoundsException(stringBuilder.toString());
            }
        });
        return (T)((List)iterable).get(n);
    }

    private static final <T> T elementAt(List<? extends T> list, int n) {
        return list.get(n);
    }

    public static final <T> T elementAtOrElse(Iterable<? extends T> list, int n, Function1<? super Integer, ? extends T> function1) {
        Intrinsics.checkParameterIsNotNull(list, "$this$elementAtOrElse");
        Intrinsics.checkParameterIsNotNull(function1, "defaultValue");
        if (list instanceof List) {
            list = list;
            if (n >= 0 && n <= CollectionsKt.getLastIndex(list)) {
                list = list.get(n);
                return (T)list;
            }
            list = function1.invoke((Integer)n);
            return (T)list;
        }
        if (n < 0) {
            return function1.invoke((Integer)n);
        }
        Iterator iterator2 = list.iterator();
        int n2 = 0;
        while (iterator2.hasNext()) {
            list = iterator2.next();
            if (n == n2) {
                return (T)list;
            }
            ++n2;
        }
        return function1.invoke((Integer)n);
    }

    private static final <T> T elementAtOrElse(List<? extends T> list, int n, Function1<? super Integer, ? extends T> function1) {
        if (n >= 0 && n <= CollectionsKt.getLastIndex(list)) {
            list = list.get(n);
            return (T)list;
        }
        list = function1.invoke((Integer)n);
        return (T)list;
    }

    public static final <T> T elementAtOrNull(Iterable<? extends T> iterable, int n) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$elementAtOrNull");
        if (iterable instanceof List) {
            return CollectionsKt.getOrNull((List)iterable, n);
        }
        if (n < 0) {
            return null;
        }
        Iterator<T> iterator2 = iterable.iterator();
        int n2 = 0;
        while (iterator2.hasNext()) {
            iterable = iterator2.next();
            if (n == n2) {
                return (T)iterable;
            }
            ++n2;
        }
        return null;
    }

    private static final <T> T elementAtOrNull(List<? extends T> list, int n) {
        return CollectionsKt.getOrNull(list, n);
    }

    public static final <T> List<T> filter(Iterable<? extends T> object, Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(object, "$this$filter");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        Collection collection = new ArrayList();
        object = object.iterator();
        while (object.hasNext()) {
            Object e = object.next();
            if (!function1.invoke(e).booleanValue()) continue;
            collection.add(e);
        }
        return (List)collection;
    }

    public static final <T> List<T> filterIndexed(Iterable<? extends T> iterable, Function2<? super Integer, ? super T, Boolean> function2) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$filterIndexed");
        Intrinsics.checkParameterIsNotNull(function2, "predicate");
        Collection collection = new ArrayList();
        Iterator<T> iterator2 = iterable.iterator();
        int n = 0;
        while (iterator2.hasNext()) {
            iterable = iterator2.next();
            if (n < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) throw (Throwable)new ArithmeticException("Index overflow has happened.");
                CollectionsKt.throwIndexOverflow();
            }
            if (function2.invoke((Integer)n, iterable).booleanValue()) {
                collection.add(iterable);
            }
            ++n;
        }
        return (List)collection;
    }

    public static final <T, C extends Collection<? super T>> C filterIndexedTo(Iterable<? extends T> object, C c, Function2<? super Integer, ? super T, Boolean> function2) {
        Intrinsics.checkParameterIsNotNull(object, "$this$filterIndexedTo");
        Intrinsics.checkParameterIsNotNull(c, "destination");
        Intrinsics.checkParameterIsNotNull(function2, "predicate");
        object = object.iterator();
        int n = 0;
        while (object.hasNext()) {
            Object e = object.next();
            if (n < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) throw (Throwable)new ArithmeticException("Index overflow has happened.");
                CollectionsKt.throwIndexOverflow();
            }
            if (function2.invoke((Integer)n, e).booleanValue()) {
                c.add(e);
            }
            ++n;
        }
        return c;
    }

    public static final /* synthetic */ <R> List<R> filterIsInstance(Iterable<?> iterable) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$filterIsInstance");
        Collection collection = new ArrayList();
        Iterator<?> iterator2 = iterable.iterator();
        while (iterator2.hasNext()) {
            iterable = iterator2.next();
            Intrinsics.reifiedOperationMarker(3, "R");
            if (!(iterable instanceof Object)) continue;
            collection.add(iterable);
        }
        return (List)collection;
    }

    public static final /* synthetic */ <R, C extends Collection<? super R>> C filterIsInstanceTo(Iterable<?> object, C c) {
        Intrinsics.checkParameterIsNotNull(object, "$this$filterIsInstanceTo");
        Intrinsics.checkParameterIsNotNull(c, "destination");
        object = object.iterator();
        while (object.hasNext()) {
            Object e = object.next();
            Intrinsics.reifiedOperationMarker(3, "R");
            if (!(e instanceof Object)) continue;
            c.add(e);
        }
        return c;
    }

    public static final <T> List<T> filterNot(Iterable<? extends T> object, Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(object, "$this$filterNot");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        Collection collection = new ArrayList();
        object = object.iterator();
        while (object.hasNext()) {
            Object e = object.next();
            if (function1.invoke(e).booleanValue()) continue;
            collection.add(e);
        }
        return (List)collection;
    }

    public static final <T> List<T> filterNotNull(Iterable<? extends T> iterable) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$filterNotNull");
        return (List)CollectionsKt.filterNotNullTo(iterable, (Collection)new ArrayList());
    }

    public static final <C extends Collection<? super T>, T> C filterNotNullTo(Iterable<? extends T> object, C c) {
        Intrinsics.checkParameterIsNotNull(object, "$this$filterNotNullTo");
        Intrinsics.checkParameterIsNotNull(c, "destination");
        object = object.iterator();
        while (object.hasNext()) {
            Object e = object.next();
            if (e == null) continue;
            c.add(e);
        }
        return c;
    }

    public static final <T, C extends Collection<? super T>> C filterNotTo(Iterable<? extends T> iterable, C c, Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$filterNotTo");
        Intrinsics.checkParameterIsNotNull(c, "destination");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        Iterator<T> iterator2 = iterable.iterator();
        while (iterator2.hasNext()) {
            iterable = iterator2.next();
            if (function1.invoke(iterable).booleanValue()) continue;
            c.add(iterable);
        }
        return c;
    }

    public static final <T, C extends Collection<? super T>> C filterTo(Iterable<? extends T> iterable, C c, Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$filterTo");
        Intrinsics.checkParameterIsNotNull(c, "destination");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        Iterator<T> iterator2 = iterable.iterator();
        while (iterator2.hasNext()) {
            iterable = iterator2.next();
            if (!function1.invoke(iterable).booleanValue()) continue;
            c.add(iterable);
        }
        return c;
    }

    private static final <T> T find(Iterable<? extends T> iterable, Function1<? super T, Boolean> function1) {
        Iterator<T> iterator2 = iterable.iterator();
        do {
            if (iterator2.hasNext()) continue;
            iterable = null;
            return (T)iterable;
        } while (!function1.invoke(iterable = iterator2.next()).booleanValue());
        return (T)iterable;
    }

    private static final <T> T findLast(Iterable<? extends T> iterable, Function1<? super T, Boolean> function1) {
        Iterator<T> iterator2 = iterable.iterator();
        iterable = null;
        while (iterator2.hasNext()) {
            T t = iterator2.next();
            if (!function1.invoke(t).booleanValue()) continue;
            iterable = t;
        }
        return (T)iterable;
    }

    private static final <T> T findLast(List<? extends T> list, Function1<? super T, Boolean> function1) {
        ListIterator<T> listIterator = list.listIterator(list.size());
        do {
            if (listIterator.hasPrevious()) continue;
            list = null;
            return (T)list;
        } while (!function1.invoke(list = listIterator.previous()).booleanValue());
        return (T)list;
    }

    public static final <T> T first(Iterable<? extends T> object) {
        Intrinsics.checkParameterIsNotNull(object, "$this$first");
        if (object instanceof List) {
            return CollectionsKt.first((List)object);
        }
        if (!(object = object.iterator()).hasNext()) throw (Throwable)new NoSuchElementException("Collection is empty.");
        return (T)object.next();
    }

    public static final <T> T first(Iterable<? extends T> iterable, Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$first");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        Iterator<T> iterator2 = iterable.iterator();
        do {
            if (!iterator2.hasNext()) throw (Throwable)new NoSuchElementException("Collection contains no element matching the predicate.");
        } while (!function1.invoke(iterable = iterator2.next()).booleanValue());
        return (T)iterable;
    }

    public static final <T> T first(List<? extends T> list) {
        Intrinsics.checkParameterIsNotNull(list, "$this$first");
        if (list.isEmpty()) throw (Throwable)new NoSuchElementException("List is empty.");
        return list.get(0);
    }

    public static final <T> T firstOrNull(Iterable<? extends T> object) {
        Intrinsics.checkParameterIsNotNull(object, "$this$firstOrNull");
        if (object instanceof List) {
            if (!(object = (List)object).isEmpty()) return (T)object.get(0);
            return null;
        }
        if ((object = object.iterator()).hasNext()) return (T)object.next();
        return null;
    }

    public static final <T> T firstOrNull(Iterable<? extends T> object, Function1<? super T, Boolean> function1) {
        Object e;
        Intrinsics.checkParameterIsNotNull(object, "$this$firstOrNull");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        object = object.iterator();
        do {
            if (!object.hasNext()) return null;
        } while (!function1.invoke(e = object.next()).booleanValue());
        return (T)e;
    }

    public static final <T> T firstOrNull(List<? extends T> list) {
        Intrinsics.checkParameterIsNotNull(list, "$this$firstOrNull");
        if (list.isEmpty()) {
            list = null;
            return (T)list;
        }
        list = list.get(0);
        return (T)list;
    }

    public static final <T, R> List<R> flatMap(Iterable<? extends T> object, Function1<? super T, ? extends Iterable<? extends R>> function1) {
        Intrinsics.checkParameterIsNotNull(object, "$this$flatMap");
        Intrinsics.checkParameterIsNotNull(function1, "transform");
        Collection collection = new ArrayList();
        object = object.iterator();
        while (object.hasNext()) {
            CollectionsKt.addAll(collection, function1.invoke(object.next()));
        }
        return (List)collection;
    }

    public static final <T, R, C extends Collection<? super R>> C flatMapTo(Iterable<? extends T> object, C c, Function1<? super T, ? extends Iterable<? extends R>> function1) {
        Intrinsics.checkParameterIsNotNull(object, "$this$flatMapTo");
        Intrinsics.checkParameterIsNotNull(c, "destination");
        Intrinsics.checkParameterIsNotNull(function1, "transform");
        object = object.iterator();
        while (object.hasNext()) {
            CollectionsKt.addAll(c, function1.invoke(object.next()));
        }
        return c;
    }

    public static final <T, R> R fold(Iterable<? extends T> object, R r, Function2<? super R, ? super T, ? extends R> function2) {
        Intrinsics.checkParameterIsNotNull(object, "$this$fold");
        Intrinsics.checkParameterIsNotNull(function2, "operation");
        object = object.iterator();
        while (object.hasNext()) {
            r = function2.invoke(r, object.next());
        }
        return r;
    }

    public static final <T, R> R foldIndexed(Iterable<? extends T> object, R r, Function3<? super Integer, ? super R, ? super T, ? extends R> function3) {
        Intrinsics.checkParameterIsNotNull(object, "$this$foldIndexed");
        Intrinsics.checkParameterIsNotNull(function3, "operation");
        object = object.iterator();
        int n = 0;
        while (object.hasNext()) {
            Object e = object.next();
            if (n < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) throw (Throwable)new ArithmeticException("Index overflow has happened.");
                CollectionsKt.throwIndexOverflow();
            }
            r = function3.invoke((Integer)n, r, e);
            ++n;
        }
        return r;
    }

    public static final <T, R> R foldRight(List<? extends T> object, R r, Function2<? super T, ? super R, ? extends R> function2) {
        Intrinsics.checkParameterIsNotNull(object, "$this$foldRight");
        Intrinsics.checkParameterIsNotNull(function2, "operation");
        R r2 = r;
        if (object.isEmpty()) return r2;
        object = object.listIterator(object.size());
        do {
            r2 = r;
            if (!object.hasPrevious()) return r2;
            r = function2.invoke(object.previous(), r);
        } while (true);
    }

    public static final <T, R> R foldRightIndexed(List<? extends T> object, R r, Function3<? super Integer, ? super T, ? super R, ? extends R> function3) {
        Intrinsics.checkParameterIsNotNull(object, "$this$foldRightIndexed");
        Intrinsics.checkParameterIsNotNull(function3, "operation");
        R r2 = r;
        if (object.isEmpty()) return r2;
        object = object.listIterator(object.size());
        do {
            r2 = r;
            if (!object.hasPrevious()) return r2;
            r = function3.invoke((Integer)object.previousIndex(), object.previous(), r);
        } while (true);
    }

    public static final <T> void forEach(Iterable<? extends T> object, Function1<? super T, Unit> function1) {
        Intrinsics.checkParameterIsNotNull(object, "$this$forEach");
        Intrinsics.checkParameterIsNotNull(function1, "action");
        object = object.iterator();
        while (object.hasNext()) {
            function1.invoke(object.next());
        }
    }

    public static final <T> void forEachIndexed(Iterable<? extends T> object, Function2<? super Integer, ? super T, Unit> function2) {
        Intrinsics.checkParameterIsNotNull(object, "$this$forEachIndexed");
        Intrinsics.checkParameterIsNotNull(function2, "action");
        object = object.iterator();
        int n = 0;
        while (object.hasNext()) {
            Object e = object.next();
            if (n < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) throw (Throwable)new ArithmeticException("Index overflow has happened.");
                CollectionsKt.throwIndexOverflow();
            }
            function2.invoke((Integer)n, e);
            ++n;
        }
    }

    private static final <T> T getOrElse(List<? extends T> list, int n, Function1<? super Integer, ? extends T> function1) {
        if (n >= 0 && n <= CollectionsKt.getLastIndex(list)) {
            list = list.get(n);
            return (T)list;
        }
        list = function1.invoke((Integer)n);
        return (T)list;
    }

    public static final <T> T getOrNull(List<? extends T> list, int n) {
        Intrinsics.checkParameterIsNotNull(list, "$this$getOrNull");
        if (n >= 0 && n <= CollectionsKt.getLastIndex(list)) {
            list = list.get(n);
            return (T)list;
        }
        list = null;
        return (T)list;
    }

    public static final <T, K> Map<K, List<T>> groupBy(Iterable<? extends T> iterable, Function1<? super T, ? extends K> function1) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$groupBy");
        Intrinsics.checkParameterIsNotNull(function1, "keySelector");
        Map map = new LinkedHashMap();
        Iterator<T> iterator2 = iterable.iterator();
        while (iterator2.hasNext()) {
            T t = iterator2.next();
            K k = function1.invoke(t);
            Object v = map.get(k);
            iterable = v;
            if (v == null) {
                iterable = new ArrayList<T>();
                map.put(k, iterable);
            }
            ((List)iterable).add(t);
        }
        return map;
    }

    public static final <T, K, V> Map<K, List<V>> groupBy(Iterable<? extends T> iterable, Function1<? super T, ? extends K> function1, Function1<? super T, ? extends V> function12) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$groupBy");
        Intrinsics.checkParameterIsNotNull(function1, "keySelector");
        Intrinsics.checkParameterIsNotNull(function12, "valueTransform");
        Map map = new LinkedHashMap();
        Iterator<T> iterator2 = iterable.iterator();
        while (iterator2.hasNext()) {
            T t = iterator2.next();
            K k = function1.invoke(t);
            Object v = map.get(k);
            iterable = v;
            if (v == null) {
                iterable = new ArrayList<T>();
                map.put(k, iterable);
            }
            ((List)iterable).add(function12.invoke(t));
        }
        return map;
    }

    public static final <T, K, M extends Map<? super K, List<T>>> M groupByTo(Iterable<? extends T> iterable, M m, Function1<? super T, ? extends K> function1) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$groupByTo");
        Intrinsics.checkParameterIsNotNull(m, "destination");
        Intrinsics.checkParameterIsNotNull(function1, "keySelector");
        Iterator<T> iterator2 = iterable.iterator();
        while (iterator2.hasNext()) {
            T t = iterator2.next();
            K k = function1.invoke(t);
            List<T> list = m.get(k);
            iterable = list;
            if (list == null) {
                iterable = new ArrayList<T>();
                m.put(k, iterable);
            }
            ((List)iterable).add(t);
        }
        return m;
    }

    public static final <T, K, V, M extends Map<? super K, List<V>>> M groupByTo(Iterable<? extends T> iterable, M m, Function1<? super T, ? extends K> function1, Function1<? super T, ? extends V> function12) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$groupByTo");
        Intrinsics.checkParameterIsNotNull(m, "destination");
        Intrinsics.checkParameterIsNotNull(function1, "keySelector");
        Intrinsics.checkParameterIsNotNull(function12, "valueTransform");
        Iterator<T> iterator2 = iterable.iterator();
        while (iterator2.hasNext()) {
            T t = iterator2.next();
            K k = function1.invoke(t);
            List<V> list = m.get(k);
            iterable = list;
            if (list == null) {
                iterable = new ArrayList<T>();
                m.put(k, iterable);
            }
            ((List)iterable).add(function12.invoke(t));
        }
        return m;
    }

    public static final <T, K> Grouping<T, K> groupingBy(Iterable<? extends T> iterable, Function1<? super T, ? extends K> function1) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$groupingBy");
        Intrinsics.checkParameterIsNotNull(function1, "keySelector");
        return new Grouping<T, K>(iterable, function1){
            final /* synthetic */ Function1 $keySelector;
            final /* synthetic */ Iterable $this_groupingBy;
            {
                this.$this_groupingBy = iterable;
                this.$keySelector = function1;
            }

            public K keyOf(T t) {
                return (K)this.$keySelector.invoke(t);
            }

            public Iterator<T> sourceIterator() {
                return this.$this_groupingBy.iterator();
            }
        };
    }

    public static final <T> int indexOf(Iterable<? extends T> iterable, T t) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$indexOf");
        if (iterable instanceof List) {
            return ((List)iterable).indexOf(t);
        }
        int n = 0;
        Iterator<T> iterator2 = iterable.iterator();
        while (iterator2.hasNext()) {
            iterable = iterator2.next();
            if (n < 0) {
                CollectionsKt.throwIndexOverflow();
            }
            if (Intrinsics.areEqual(t, iterable)) {
                return n;
            }
            ++n;
        }
        return -1;
    }

    public static final <T> int indexOf(List<? extends T> list, T t) {
        Intrinsics.checkParameterIsNotNull(list, "$this$indexOf");
        return list.indexOf(t);
    }

    public static final <T> int indexOfFirst(Iterable<? extends T> object, Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(object, "$this$indexOfFirst");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        object = object.iterator();
        int n = 0;
        while (object.hasNext()) {
            Object e = object.next();
            if (n < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) throw (Throwable)new ArithmeticException("Index overflow has happened.");
                CollectionsKt.throwIndexOverflow();
            }
            if (function1.invoke(e).booleanValue()) {
                return n;
            }
            ++n;
        }
        return -1;
    }

    public static final <T> int indexOfFirst(List<? extends T> object, Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(object, "$this$indexOfFirst");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        object = object.iterator();
        int n = 0;
        while (object.hasNext()) {
            if (function1.invoke(object.next()).booleanValue()) {
                return n;
            }
            ++n;
        }
        return -1;
    }

    public static final <T> int indexOfLast(Iterable<? extends T> object, Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(object, "$this$indexOfLast");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        object = object.iterator();
        int n = -1;
        int n2 = 0;
        while (object.hasNext()) {
            Object e = object.next();
            if (n2 < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) throw (Throwable)new ArithmeticException("Index overflow has happened.");
                CollectionsKt.throwIndexOverflow();
            }
            if (function1.invoke(e).booleanValue()) {
                n = n2;
            }
            ++n2;
        }
        return n;
    }

    public static final <T> int indexOfLast(List<? extends T> object, Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(object, "$this$indexOfLast");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        object = object.listIterator(object.size());
        do {
            if (!object.hasPrevious()) return -1;
        } while (!function1.invoke(object.previous()).booleanValue());
        return object.nextIndex();
    }

    public static final <T> Set<T> intersect(Iterable<? extends T> iterable, Iterable<? extends T> iterable2) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$intersect");
        Intrinsics.checkParameterIsNotNull(iterable2, "other");
        iterable = CollectionsKt.toMutableSet(iterable);
        CollectionsKt.retainAll((Collection)iterable, iterable2);
        return iterable;
    }

    public static final <T, A extends Appendable> A joinTo(Iterable<? extends T> object, A a, CharSequence charSequence, CharSequence charSequence2, CharSequence charSequence3, int n, CharSequence charSequence4, Function1<? super T, ? extends CharSequence> function1) {
        int n2;
        Intrinsics.checkParameterIsNotNull(object, "$this$joinTo");
        Intrinsics.checkParameterIsNotNull(a, "buffer");
        Intrinsics.checkParameterIsNotNull(charSequence, "separator");
        Intrinsics.checkParameterIsNotNull(charSequence2, "prefix");
        Intrinsics.checkParameterIsNotNull(charSequence3, "postfix");
        Intrinsics.checkParameterIsNotNull(charSequence4, "truncated");
        a.append(charSequence2);
        object = object.iterator();
        int n3 = 0;
        do {
            n2 = n3++;
            if (!object.hasNext()) break;
            charSequence2 = object.next();
            if (n3 > 1) {
                a.append(charSequence);
            }
            if (n >= 0) {
                n2 = n3;
                if (n3 > n) break;
            }
            StringsKt.appendElement(a, charSequence2, function1);
        } while (true);
        if (n >= 0 && n2 > n) {
            a.append(charSequence4);
        }
        a.append(charSequence3);
        return a;
    }

    public static /* synthetic */ Appendable joinTo$default(Iterable iterable, Appendable appendable, CharSequence charSequence, CharSequence charSequence2, CharSequence charSequence3, int n, CharSequence charSequence4, Function1 function1, int n2, Object object) {
        if ((n2 & 2) != 0) {
            charSequence = ", ";
        }
        if ((n2 & 4) != 0) {
            charSequence2 = "";
        }
        if ((n2 & 8) != 0) {
            charSequence3 = "";
        }
        if ((n2 & 16) != 0) {
            n = -1;
        }
        if ((n2 & 32) != 0) {
            charSequence4 = "...";
        }
        if ((n2 & 64) == 0) return CollectionsKt.joinTo(iterable, appendable, charSequence, charSequence2, charSequence3, n, charSequence4, function1);
        function1 = null;
        return CollectionsKt.joinTo(iterable, appendable, charSequence, charSequence2, charSequence3, n, charSequence4, function1);
    }

    public static final <T> String joinToString(Iterable<? extends T> object, CharSequence charSequence, CharSequence charSequence2, CharSequence charSequence3, int n, CharSequence charSequence4, Function1<? super T, ? extends CharSequence> function1) {
        Intrinsics.checkParameterIsNotNull(object, "$this$joinToString");
        Intrinsics.checkParameterIsNotNull(charSequence, "separator");
        Intrinsics.checkParameterIsNotNull(charSequence2, "prefix");
        Intrinsics.checkParameterIsNotNull(charSequence3, "postfix");
        Intrinsics.checkParameterIsNotNull(charSequence4, "truncated");
        object = ((StringBuilder)CollectionsKt.joinTo(object, (Appendable)new StringBuilder(), charSequence, charSequence2, charSequence3, n, charSequence4, function1)).toString();
        Intrinsics.checkExpressionValueIsNotNull(object, "joinTo(StringBuilder(), \u2026ed, transform).toString()");
        return object;
    }

    public static /* synthetic */ String joinToString$default(Iterable iterable, CharSequence charSequence, CharSequence charSequence2, CharSequence charSequence3, int n, CharSequence charSequence4, Function1 function1, int n2, Object object) {
        if ((n2 & 1) != 0) {
            charSequence = ", ";
        }
        if ((n2 & 2) != 0) {
            charSequence2 = "";
        }
        if ((n2 & 4) != 0) {
            charSequence3 = "";
        }
        if ((n2 & 8) != 0) {
            n = -1;
        }
        if ((n2 & 16) != 0) {
            charSequence4 = "...";
        }
        if ((n2 & 32) == 0) return CollectionsKt.joinToString(iterable, charSequence, charSequence2, charSequence3, n, charSequence4, function1);
        function1 = null;
        return CollectionsKt.joinToString(iterable, charSequence, charSequence2, charSequence3, n, charSequence4, function1);
    }

    public static final <T> T last(Iterable<? extends T> iterable) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$last");
        if (iterable instanceof List) {
            return CollectionsKt.last((List)iterable);
        }
        Iterator<T> iterator2 = iterable.iterator();
        if (!iterator2.hasNext()) throw (Throwable)new NoSuchElementException("Collection is empty.");
        iterable = iterator2.next();
        while (iterator2.hasNext()) {
            iterable = iterator2.next();
        }
        return (T)iterable;
    }

    public static final <T> T last(Iterable<? extends T> iterable, Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$last");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        Iterator<T> iterator2 = iterable.iterator();
        iterable = null;
        boolean bl = false;
        do {
            if (!iterator2.hasNext()) {
                if (!bl) throw (Throwable)new NoSuchElementException("Collection contains no element matching the predicate.");
                return (T)iterable;
            }
            T t = iterator2.next();
            if (!function1.invoke(t).booleanValue()) continue;
            iterable = t;
            bl = true;
        } while (true);
    }

    public static final <T> T last(List<? extends T> list) {
        Intrinsics.checkParameterIsNotNull(list, "$this$last");
        if (list.isEmpty()) throw (Throwable)new NoSuchElementException("List is empty.");
        return list.get(CollectionsKt.getLastIndex(list));
    }

    public static final <T> T last(List<? extends T> list, Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(list, "$this$last");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        ListIterator<T> listIterator = list.listIterator(list.size());
        do {
            if (!listIterator.hasPrevious()) throw (Throwable)new NoSuchElementException("List contains no element matching the predicate.");
        } while (!function1.invoke(list = listIterator.previous()).booleanValue());
        return (T)list;
    }

    public static final <T> int lastIndexOf(Iterable<? extends T> object, T t) {
        Intrinsics.checkParameterIsNotNull(object, "$this$lastIndexOf");
        if (object instanceof List) {
            return ((List)object).lastIndexOf(t);
        }
        int n = -1;
        int n2 = 0;
        object = object.iterator();
        while (object.hasNext()) {
            Object e = object.next();
            if (n2 < 0) {
                CollectionsKt.throwIndexOverflow();
            }
            if (Intrinsics.areEqual(t, e)) {
                n = n2;
            }
            ++n2;
        }
        return n;
    }

    public static final <T> int lastIndexOf(List<? extends T> list, T t) {
        Intrinsics.checkParameterIsNotNull(list, "$this$lastIndexOf");
        return list.lastIndexOf(t);
    }

    public static final <T> T lastOrNull(Iterable<? extends T> object) {
        Intrinsics.checkParameterIsNotNull(object, "$this$lastOrNull");
        boolean bl = object instanceof List;
        Iterator<T> iterator2 = null;
        if (bl) {
            if ((object = (List)object).isEmpty()) {
                object = iterator2;
                return (T)object;
            }
            object = object.get(object.size() - 1);
            return (T)object;
        }
        iterator2 = object.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        object = iterator2.next();
        while (iterator2.hasNext()) {
            object = iterator2.next();
        }
        return (T)object;
    }

    public static final <T> T lastOrNull(Iterable<? extends T> iterable, Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$lastOrNull");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        Iterator<T> iterator2 = iterable.iterator();
        iterable = null;
        while (iterator2.hasNext()) {
            T t = iterator2.next();
            if (!function1.invoke(t).booleanValue()) continue;
            iterable = t;
        }
        return (T)iterable;
    }

    public static final <T> T lastOrNull(List<? extends T> list) {
        Intrinsics.checkParameterIsNotNull(list, "$this$lastOrNull");
        if (list.isEmpty()) {
            list = null;
            return (T)list;
        }
        list = list.get(list.size() - 1);
        return (T)list;
    }

    public static final <T> T lastOrNull(List<? extends T> object, Function1<? super T, Boolean> function1) {
        Object e;
        Intrinsics.checkParameterIsNotNull(object, "$this$lastOrNull");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        object = object.listIterator(object.size());
        do {
            if (!object.hasPrevious()) return null;
        } while (!function1.invoke(e = object.previous()).booleanValue());
        return (T)e;
    }

    public static final <T, R> List<R> map(Iterable<? extends T> object, Function1<? super T, ? extends R> function1) {
        Intrinsics.checkParameterIsNotNull(object, "$this$map");
        Intrinsics.checkParameterIsNotNull(function1, "transform");
        Collection collection = new ArrayList(CollectionsKt.collectionSizeOrDefault(object, 10));
        object = object.iterator();
        while (object.hasNext()) {
            collection.add(function1.invoke(object.next()));
        }
        return (List)collection;
    }

    public static final <T, R> List<R> mapIndexed(Iterable<? extends T> object, Function2<? super Integer, ? super T, ? extends R> function2) {
        Intrinsics.checkParameterIsNotNull(object, "$this$mapIndexed");
        Intrinsics.checkParameterIsNotNull(function2, "transform");
        Collection collection = new ArrayList(CollectionsKt.collectionSizeOrDefault(object, 10));
        object = object.iterator();
        int n = 0;
        while (object.hasNext()) {
            Object e = object.next();
            if (n < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) throw (Throwable)new ArithmeticException("Index overflow has happened.");
                CollectionsKt.throwIndexOverflow();
            }
            collection.add(function2.invoke((Integer)n, e));
            ++n;
        }
        return (List)collection;
    }

    public static final <T, R> List<R> mapIndexedNotNull(Iterable<? extends T> object, Function2<? super Integer, ? super T, ? extends R> function2) {
        Intrinsics.checkParameterIsNotNull(object, "$this$mapIndexedNotNull");
        Intrinsics.checkParameterIsNotNull(function2, "transform");
        Collection collection = new ArrayList();
        object = object.iterator();
        int n = 0;
        while (object.hasNext()) {
            Object object2 = object.next();
            if (n < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) throw (Throwable)new ArithmeticException("Index overflow has happened.");
                CollectionsKt.throwIndexOverflow();
            }
            if ((object2 = function2.invoke((Integer)n, object2)) != null) {
                collection.add(object2);
            }
            ++n;
        }
        return (List)collection;
    }

    public static final <T, R, C extends Collection<? super R>> C mapIndexedNotNullTo(Iterable<? extends T> object, C c, Function2<? super Integer, ? super T, ? extends R> function2) {
        Intrinsics.checkParameterIsNotNull(object, "$this$mapIndexedNotNullTo");
        Intrinsics.checkParameterIsNotNull(c, "destination");
        Intrinsics.checkParameterIsNotNull(function2, "transform");
        object = object.iterator();
        int n = 0;
        while (object.hasNext()) {
            Object object2 = object.next();
            if (n < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) throw (Throwable)new ArithmeticException("Index overflow has happened.");
                CollectionsKt.throwIndexOverflow();
            }
            if ((object2 = function2.invoke((Integer)n, object2)) != null) {
                c.add(object2);
            }
            ++n;
        }
        return c;
    }

    public static final <T, R, C extends Collection<? super R>> C mapIndexedTo(Iterable<? extends T> iterable, C c, Function2<? super Integer, ? super T, ? extends R> function2) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$mapIndexedTo");
        Intrinsics.checkParameterIsNotNull(c, "destination");
        Intrinsics.checkParameterIsNotNull(function2, "transform");
        Iterator<T> iterator2 = iterable.iterator();
        int n = 0;
        while (iterator2.hasNext()) {
            iterable = iterator2.next();
            if (n < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) throw (Throwable)new ArithmeticException("Index overflow has happened.");
                CollectionsKt.throwIndexOverflow();
            }
            c.add(function2.invoke((Integer)n, iterable));
            ++n;
        }
        return c;
    }

    public static final <T, R> List<R> mapNotNull(Iterable<? extends T> iterable, Function1<? super T, ? extends R> function1) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$mapNotNull");
        Intrinsics.checkParameterIsNotNull(function1, "transform");
        Collection collection = new ArrayList();
        Iterator<T> iterator2 = iterable.iterator();
        while (iterator2.hasNext()) {
            iterable = function1.invoke(iterator2.next());
            if (iterable == null) continue;
            collection.add(iterable);
        }
        return (List)collection;
    }

    public static final <T, R, C extends Collection<? super R>> C mapNotNullTo(Iterable<? extends T> iterable, C c, Function1<? super T, ? extends R> function1) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$mapNotNullTo");
        Intrinsics.checkParameterIsNotNull(c, "destination");
        Intrinsics.checkParameterIsNotNull(function1, "transform");
        Iterator<T> iterator2 = iterable.iterator();
        while (iterator2.hasNext()) {
            iterable = function1.invoke(iterator2.next());
            if (iterable == null) continue;
            c.add(iterable);
        }
        return c;
    }

    public static final <T, R, C extends Collection<? super R>> C mapTo(Iterable<? extends T> object, C c, Function1<? super T, ? extends R> function1) {
        Intrinsics.checkParameterIsNotNull(object, "$this$mapTo");
        Intrinsics.checkParameterIsNotNull(c, "destination");
        Intrinsics.checkParameterIsNotNull(function1, "transform");
        object = object.iterator();
        while (object.hasNext()) {
            c.add(function1.invoke(object.next()));
        }
        return c;
    }

    public static final <T extends Comparable<? super T>> T max(Iterable<? extends T> object) {
        Intrinsics.checkParameterIsNotNull(object, "$this$max");
        Iterator<T> iterator2 = object.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        object = (Comparable)iterator2.next();
        while (iterator2.hasNext()) {
            Comparable comparable = (Comparable)iterator2.next();
            if (object.compareTo(comparable) >= 0) continue;
            object = comparable;
        }
        return (T)object;
    }

    public static final Double max(Iterable<Double> object) {
        double d;
        Intrinsics.checkParameterIsNotNull(object, "$this$max");
        object = object.iterator();
        if (!object.hasNext()) {
            return null;
        }
        double d2 = d = ((Number)object.next()).doubleValue();
        if (Double.isNaN(d)) {
            return d;
        }
        while (object.hasNext()) {
            d = ((Number)object.next()).doubleValue();
            if (Double.isNaN(d)) {
                return d;
            }
            if (!(d2 < d)) continue;
            d2 = d;
        }
        return d2;
    }

    public static final Float max(Iterable<Float> object) {
        float f;
        Intrinsics.checkParameterIsNotNull(object, "$this$max");
        object = object.iterator();
        if (!object.hasNext()) {
            return null;
        }
        float f2 = f = ((Number)object.next()).floatValue();
        if (Float.isNaN(f)) {
            return Float.valueOf(f);
        }
        while (object.hasNext()) {
            f = ((Number)object.next()).floatValue();
            if (Float.isNaN(f)) {
                return Float.valueOf(f);
            }
            if (!(f2 < f)) continue;
            f2 = f;
        }
        return Float.valueOf(f2);
    }

    public static final <T, R extends Comparable<? super R>> T maxBy(Iterable<? extends T> object, Function1<? super T, ? extends R> function1) {
        T t;
        Intrinsics.checkParameterIsNotNull(object, "$this$maxBy");
        Intrinsics.checkParameterIsNotNull(function1, "selector");
        Iterator<T> iterator2 = object.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        T t2 = iterator2.next();
        if (!iterator2.hasNext()) {
            return t2;
        }
        Object object2 = (Comparable)function1.invoke(t2);
        do {
            T t3 = iterator2.next();
            Comparable comparable = (Comparable)function1.invoke(t3);
            t = t2;
            object = object2;
            if (object2.compareTo(comparable) < 0) {
                t = t3;
                object = comparable;
            }
            t2 = t;
            object2 = object;
        } while (iterator2.hasNext());
        return t;
    }

    public static final <T> T maxWith(Iterable<? extends T> iterable, Comparator<? super T> comparator) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$maxWith");
        Intrinsics.checkParameterIsNotNull(comparator, "comparator");
        Iterator<T> iterator2 = iterable.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        iterable = iterator2.next();
        while (iterator2.hasNext()) {
            T t = iterator2.next();
            if (comparator.compare(iterable, (Iterable<T>)t) >= 0) continue;
            iterable = t;
        }
        return (T)iterable;
    }

    public static final <T extends Comparable<? super T>> T min(Iterable<? extends T> object) {
        Intrinsics.checkParameterIsNotNull(object, "$this$min");
        Iterator<T> iterator2 = object.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        object = (Comparable)iterator2.next();
        while (iterator2.hasNext()) {
            Comparable comparable = (Comparable)iterator2.next();
            if (object.compareTo(comparable) <= 0) continue;
            object = comparable;
        }
        return (T)object;
    }

    public static final Double min(Iterable<Double> object) {
        double d;
        Intrinsics.checkParameterIsNotNull(object, "$this$min");
        object = object.iterator();
        if (!object.hasNext()) {
            return null;
        }
        double d2 = d = ((Number)object.next()).doubleValue();
        if (Double.isNaN(d)) {
            return d;
        }
        while (object.hasNext()) {
            d = ((Number)object.next()).doubleValue();
            if (Double.isNaN(d)) {
                return d;
            }
            if (!(d2 > d)) continue;
            d2 = d;
        }
        return d2;
    }

    public static final Float min(Iterable<Float> object) {
        float f;
        Intrinsics.checkParameterIsNotNull(object, "$this$min");
        object = object.iterator();
        if (!object.hasNext()) {
            return null;
        }
        float f2 = f = ((Number)object.next()).floatValue();
        if (Float.isNaN(f)) {
            return Float.valueOf(f);
        }
        while (object.hasNext()) {
            f = ((Number)object.next()).floatValue();
            if (Float.isNaN(f)) {
                return Float.valueOf(f);
            }
            if (!(f2 > f)) continue;
            f2 = f;
        }
        return Float.valueOf(f2);
    }

    public static final <T, R extends Comparable<? super R>> T minBy(Iterable<? extends T> object, Function1<? super T, ? extends R> function1) {
        T t;
        Intrinsics.checkParameterIsNotNull(object, "$this$minBy");
        Intrinsics.checkParameterIsNotNull(function1, "selector");
        Iterator<T> iterator2 = object.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        T t2 = iterator2.next();
        if (!iterator2.hasNext()) {
            return t2;
        }
        Object object2 = (Comparable)function1.invoke(t2);
        do {
            T t3 = iterator2.next();
            Comparable comparable = (Comparable)function1.invoke(t3);
            t = t2;
            object = object2;
            if (object2.compareTo(comparable) > 0) {
                t = t3;
                object = comparable;
            }
            t2 = t;
            object2 = object;
        } while (iterator2.hasNext());
        return t;
    }

    public static final <T> T minWith(Iterable<? extends T> iterable, Comparator<? super T> comparator) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$minWith");
        Intrinsics.checkParameterIsNotNull(comparator, "comparator");
        Iterator<T> iterator2 = iterable.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        iterable = iterator2.next();
        while (iterator2.hasNext()) {
            T t = iterator2.next();
            if (comparator.compare(iterable, (Iterable<T>)t) <= 0) continue;
            iterable = t;
        }
        return (T)iterable;
    }

    public static final <T> List<T> minus(Iterable<? extends T> iterable, Iterable<? extends T> collection) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$minus");
        Intrinsics.checkParameterIsNotNull(collection, "elements");
        Collection<T> collection2 = CollectionsKt.convertToSetForSetOperationWith(collection, iterable);
        if (collection2.isEmpty()) {
            return CollectionsKt.toList(iterable);
        }
        collection = new ArrayList();
        Iterator<T> iterator2 = iterable.iterator();
        while (iterator2.hasNext()) {
            iterable = iterator2.next();
            if (collection2.contains(iterable)) continue;
            collection.add(iterable);
        }
        return (List)collection;
    }

    public static final <T> List<T> minus(Iterable<? extends T> object, T t) {
        Intrinsics.checkParameterIsNotNull(object, "$this$minus");
        ArrayList arrayList = new ArrayList(CollectionsKt.collectionSizeOrDefault(object, 10));
        object = object.iterator();
        boolean bl = false;
        while (object.hasNext()) {
            Object e = object.next();
            boolean bl2 = true;
            boolean bl3 = bl;
            boolean bl4 = bl2;
            if (!bl) {
                bl3 = bl;
                bl4 = bl2;
                if (Intrinsics.areEqual(e, t)) {
                    bl3 = true;
                    bl4 = false;
                }
            }
            bl = bl3;
            if (!bl4) continue;
            ((Collection)arrayList).add(e);
            bl = bl3;
        }
        return arrayList;
    }

    public static final <T> List<T> minus(Iterable<? extends T> object, Sequence<? extends T> object2) {
        Intrinsics.checkParameterIsNotNull(object, "$this$minus");
        Intrinsics.checkParameterIsNotNull(object2, "elements");
        object2 = SequencesKt.toHashSet(object2);
        if (((HashSet)object2).isEmpty()) {
            return CollectionsKt.toList(object);
        }
        Collection collection = new ArrayList();
        object = object.iterator();
        while (object.hasNext()) {
            Object e = object.next();
            if (((HashSet)object2).contains(e)) continue;
            collection.add(e);
        }
        return (List)collection;
    }

    public static final <T> List<T> minus(Iterable<? extends T> iterable, T[] object) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$minus");
        Intrinsics.checkParameterIsNotNull(object, "elements");
        boolean bl = ((T[])object).length == 0;
        if (bl) {
            return CollectionsKt.toList(iterable);
        }
        object = ArraysKt.toHashSet(object);
        Collection collection = new ArrayList();
        Iterator<T> iterator2 = iterable.iterator();
        while (iterator2.hasNext()) {
            iterable = iterator2.next();
            if (((HashSet)object).contains(iterable)) continue;
            collection.add(iterable);
        }
        return (List)collection;
    }

    private static final <T> List<T> minusElement(Iterable<? extends T> iterable, T t) {
        return CollectionsKt.minus(iterable, t);
    }

    public static final <T> boolean none(Iterable<? extends T> iterable) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$none");
        if (!(iterable instanceof Collection)) return iterable.iterator().hasNext() ^ true;
        return ((Collection)iterable).isEmpty();
    }

    public static final <T> boolean none(Iterable<? extends T> object, Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(object, "$this$none");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        if (object instanceof Collection && ((Collection)object).isEmpty()) {
            return true;
        }
        object = object.iterator();
        do {
            if (!object.hasNext()) return true;
        } while (!function1.invoke(object.next()).booleanValue());
        return false;
    }

    public static final <T, C extends Iterable<? extends T>> C onEach(C c, Function1<? super T, Unit> function1) {
        Intrinsics.checkParameterIsNotNull(c, "$this$onEach");
        Intrinsics.checkParameterIsNotNull(function1, "action");
        Iterator<T> iterator2 = c.iterator();
        while (iterator2.hasNext()) {
            function1.invoke(iterator2.next());
        }
        return c;
    }

    public static final <T> Pair<List<T>, List<T>> partition(Iterable<? extends T> object, Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(object, "$this$partition");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        ArrayList arrayList = new ArrayList();
        ArrayList arrayList2 = new ArrayList();
        object = object.iterator();
        while (object.hasNext()) {
            Object e = object.next();
            if (function1.invoke(e).booleanValue()) {
                arrayList.add(e);
                continue;
            }
            arrayList2.add(e);
        }
        return new Pair<List<T>, List<T>>(arrayList, arrayList2);
    }

    public static final <T> List<T> plus(Iterable<? extends T> iterable, Iterable<? extends T> iterable2) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$plus");
        Intrinsics.checkParameterIsNotNull(iterable2, "elements");
        if (iterable instanceof Collection) {
            return CollectionsKt.plus((Collection)iterable, iterable2);
        }
        ArrayList arrayList = new ArrayList();
        Collection collection = arrayList;
        CollectionsKt.addAll(collection, iterable);
        CollectionsKt.addAll(collection, iterable2);
        return arrayList;
    }

    public static final <T> List<T> plus(Iterable<? extends T> iterable, T t) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$plus");
        if (iterable instanceof Collection) {
            return CollectionsKt.plus((Collection)iterable, t);
        }
        ArrayList<T> arrayList = new ArrayList<T>();
        CollectionsKt.addAll((Collection)arrayList, iterable);
        arrayList.add(t);
        return arrayList;
    }

    public static final <T> List<T> plus(Iterable<? extends T> iterable, Sequence<? extends T> sequence) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$plus");
        Intrinsics.checkParameterIsNotNull(sequence, "elements");
        ArrayList arrayList = new ArrayList();
        Collection collection = arrayList;
        CollectionsKt.addAll(collection, iterable);
        CollectionsKt.addAll(collection, sequence);
        return arrayList;
    }

    public static final <T> List<T> plus(Iterable<? extends T> iterable, T[] arrT) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$plus");
        Intrinsics.checkParameterIsNotNull(arrT, "elements");
        if (iterable instanceof Collection) {
            return CollectionsKt.plus((Collection)iterable, arrT);
        }
        ArrayList arrayList = new ArrayList();
        Collection collection = arrayList;
        CollectionsKt.addAll(collection, iterable);
        CollectionsKt.addAll(collection, arrT);
        return arrayList;
    }

    public static final <T> List<T> plus(Collection<? extends T> collection, Iterable<? extends T> iterable) {
        Intrinsics.checkParameterIsNotNull(collection, "$this$plus");
        Intrinsics.checkParameterIsNotNull(iterable, "elements");
        if (iterable instanceof Collection) {
            int n = collection.size();
            Collection collection2 = (Collection)iterable;
            iterable = new ArrayList<T>(n + collection2.size());
            ((ArrayList)iterable).addAll(collection);
            ((ArrayList)iterable).addAll(collection2);
            return (List)iterable;
        }
        collection = new ArrayList<T>(collection);
        CollectionsKt.addAll(collection, iterable);
        return (List)collection;
    }

    public static final <T> List<T> plus(Collection<? extends T> collection, T t) {
        Intrinsics.checkParameterIsNotNull(collection, "$this$plus");
        ArrayList<T> arrayList = new ArrayList<T>(collection.size() + 1);
        arrayList.addAll(collection);
        arrayList.add(t);
        return arrayList;
    }

    public static final <T> List<T> plus(Collection<? extends T> collection, Sequence<? extends T> sequence) {
        Intrinsics.checkParameterIsNotNull(collection, "$this$plus");
        Intrinsics.checkParameterIsNotNull(sequence, "elements");
        ArrayList<T> arrayList = new ArrayList<T>(collection.size() + 10);
        arrayList.addAll(collection);
        CollectionsKt.addAll((Collection)arrayList, sequence);
        return arrayList;
    }

    public static final <T> List<T> plus(Collection<? extends T> collection, T[] arrT) {
        Intrinsics.checkParameterIsNotNull(collection, "$this$plus");
        Intrinsics.checkParameterIsNotNull(arrT, "elements");
        ArrayList<T> arrayList = new ArrayList<T>(collection.size() + arrT.length);
        arrayList.addAll(collection);
        CollectionsKt.addAll((Collection)arrayList, arrT);
        return arrayList;
    }

    private static final <T> List<T> plusElement(Iterable<? extends T> iterable, T t) {
        return CollectionsKt.plus(iterable, t);
    }

    private static final <T> List<T> plusElement(Collection<? extends T> collection, T t) {
        return CollectionsKt.plus(collection, t);
    }

    private static final <T> T random(Collection<? extends T> collection) {
        return CollectionsKt.random(collection, Random.Default);
    }

    public static final <T> T random(Collection<? extends T> collection, Random random) {
        Intrinsics.checkParameterIsNotNull(collection, "$this$random");
        Intrinsics.checkParameterIsNotNull(random, "random");
        if (collection.isEmpty()) throw (Throwable)new NoSuchElementException("Collection is empty.");
        return CollectionsKt.elementAt((Iterable)collection, random.nextInt(collection.size()));
    }

    private static final <T> T randomOrNull(Collection<? extends T> collection) {
        return CollectionsKt.randomOrNull(collection, Random.Default);
    }

    public static final <T> T randomOrNull(Collection<? extends T> collection, Random random) {
        Intrinsics.checkParameterIsNotNull(collection, "$this$randomOrNull");
        Intrinsics.checkParameterIsNotNull(random, "random");
        if (!collection.isEmpty()) return CollectionsKt.elementAt((Iterable)collection, random.nextInt(collection.size()));
        return null;
    }

    public static final <S, T extends S> S reduce(Iterable<? extends T> iterable, Function2<? super S, ? super T, ? extends S> function2) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$reduce");
        Intrinsics.checkParameterIsNotNull(function2, "operation");
        Iterator<T> iterator2 = iterable.iterator();
        if (!iterator2.hasNext()) throw (Throwable)new UnsupportedOperationException("Empty collection can't be reduced.");
        iterable = iterator2.next();
        while (iterator2.hasNext()) {
            iterable = function2.invoke(iterable, iterator2.next());
        }
        return (S)iterable;
    }

    public static final <S, T extends S> S reduceIndexed(Iterable<? extends T> iterable, Function3<? super Integer, ? super S, ? super T, ? extends S> function3) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$reduceIndexed");
        Intrinsics.checkParameterIsNotNull(function3, "operation");
        Iterator<T> iterator2 = iterable.iterator();
        if (!iterator2.hasNext()) throw (Throwable)new UnsupportedOperationException("Empty collection can't be reduced.");
        iterable = iterator2.next();
        int n = 1;
        while (iterator2.hasNext()) {
            if (n < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) throw (Throwable)new ArithmeticException("Index overflow has happened.");
                CollectionsKt.throwIndexOverflow();
            }
            iterable = function3.invoke((Integer)n, iterable, iterator2.next());
            ++n;
        }
        return (S)iterable;
    }

    public static final <S, T extends S> S reduceOrNull(Iterable<? extends T> iterable, Function2<? super S, ? super T, ? extends S> function2) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$reduceOrNull");
        Intrinsics.checkParameterIsNotNull(function2, "operation");
        Iterator<T> iterator2 = iterable.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        iterable = iterator2.next();
        while (iterator2.hasNext()) {
            iterable = function2.invoke(iterable, iterator2.next());
        }
        return (S)iterable;
    }

    public static final <S, T extends S> S reduceRight(List<? extends T> list, Function2<? super T, ? super S, ? extends S> function2) {
        Intrinsics.checkParameterIsNotNull(list, "$this$reduceRight");
        Intrinsics.checkParameterIsNotNull(function2, "operation");
        ListIterator<T> listIterator = list.listIterator(list.size());
        if (!listIterator.hasPrevious()) throw (Throwable)new UnsupportedOperationException("Empty list can't be reduced.");
        list = listIterator.previous();
        while (listIterator.hasPrevious()) {
            list = function2.invoke(listIterator.previous(), list);
        }
        return (S)list;
    }

    public static final <S, T extends S> S reduceRightIndexed(List<? extends T> list, Function3<? super Integer, ? super T, ? super S, ? extends S> function3) {
        Intrinsics.checkParameterIsNotNull(list, "$this$reduceRightIndexed");
        Intrinsics.checkParameterIsNotNull(function3, "operation");
        ListIterator<T> listIterator = list.listIterator(list.size());
        if (!listIterator.hasPrevious()) throw (Throwable)new UnsupportedOperationException("Empty list can't be reduced.");
        list = listIterator.previous();
        while (listIterator.hasPrevious()) {
            list = function3.invoke((Integer)listIterator.previousIndex(), listIterator.previous(), list);
        }
        return (S)list;
    }

    public static final <S, T extends S> S reduceRightOrNull(List<? extends T> list, Function2<? super T, ? super S, ? extends S> function2) {
        Intrinsics.checkParameterIsNotNull(list, "$this$reduceRightOrNull");
        Intrinsics.checkParameterIsNotNull(function2, "operation");
        ListIterator<T> listIterator = list.listIterator(list.size());
        if (!listIterator.hasPrevious()) {
            return null;
        }
        list = listIterator.previous();
        while (listIterator.hasPrevious()) {
            list = function2.invoke(listIterator.previous(), list);
        }
        return (S)list;
    }

    public static final <T> Iterable<T> requireNoNulls(Iterable<? extends T> iterable) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$requireNoNulls");
        Object object = iterable.iterator();
        do {
            if (!object.hasNext()) return iterable;
        } while (object.next() != null);
        object = new StringBuilder();
        ((StringBuilder)object).append("null element found in ");
        ((StringBuilder)object).append(iterable);
        ((StringBuilder)object).append('.');
        throw (Throwable)new IllegalArgumentException(((StringBuilder)object).toString());
    }

    public static final <T> List<T> requireNoNulls(List<? extends T> list) {
        Intrinsics.checkParameterIsNotNull(list, "$this$requireNoNulls");
        Object object = list.iterator();
        do {
            if (!object.hasNext()) return list;
        } while (object.next() != null);
        object = new StringBuilder();
        ((StringBuilder)object).append("null element found in ");
        ((StringBuilder)object).append(list);
        ((StringBuilder)object).append('.');
        throw (Throwable)new IllegalArgumentException(((StringBuilder)object).toString());
    }

    public static final <T> List<T> reversed(Iterable<? extends T> iterable) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$reversed");
        if (iterable instanceof Collection && ((Collection)iterable).size() <= 1) {
            return CollectionsKt.toList(iterable);
        }
        iterable = CollectionsKt.toMutableList(iterable);
        CollectionsKt.reverse(iterable);
        return iterable;
    }

    public static final <T, R> List<R> scan(Iterable<? extends T> object, R r, Function2<? super R, ? super T, ? extends R> function2) {
        Intrinsics.checkParameterIsNotNull(object, "$this$scan");
        Intrinsics.checkParameterIsNotNull(function2, "operation");
        int n = CollectionsKt.collectionSizeOrDefault(object, 9);
        if (n == 0) {
            return CollectionsKt.listOf(r);
        }
        ArrayList<R> arrayList = new ArrayList<R>(n + 1);
        arrayList.add(r);
        object = object.iterator();
        while (object.hasNext()) {
            r = function2.invoke(r, object.next());
            arrayList.add(r);
        }
        return arrayList;
    }

    public static final <T, R> List<R> scanIndexed(Iterable<? extends T> object, R r, Function3<? super Integer, ? super R, ? super T, ? extends R> function3) {
        Intrinsics.checkParameterIsNotNull(object, "$this$scanIndexed");
        Intrinsics.checkParameterIsNotNull(function3, "operation");
        int n = CollectionsKt.collectionSizeOrDefault(object, 9);
        if (n == 0) {
            return CollectionsKt.listOf(r);
        }
        ArrayList<R> arrayList = new ArrayList<R>(n + 1);
        arrayList.add(r);
        n = 0;
        object = object.iterator();
        while (object.hasNext()) {
            Object e = object.next();
            int n2 = n + 1;
            r = function3.invoke((Integer)n, r, e);
            arrayList.add(r);
            n = n2;
        }
        return arrayList;
    }

    public static final <S, T extends S> List<S> scanReduce(Iterable<? extends T> iterable, Function2<? super S, ? super T, ? extends S> function2) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$scanReduce");
        Intrinsics.checkParameterIsNotNull(function2, "operation");
        Iterator<T> iterator2 = iterable.iterator();
        if (!iterator2.hasNext()) {
            return CollectionsKt.emptyList();
        }
        T t = iterator2.next();
        ArrayList<Object> arrayList = new ArrayList<Object>(CollectionsKt.collectionSizeOrDefault(iterable, 10));
        arrayList.add(t);
        iterable = t;
        while (iterator2.hasNext()) {
            iterable = function2.invoke(iterable, iterator2.next());
            arrayList.add(iterable);
        }
        return arrayList;
    }

    public static final <S, T extends S> List<S> scanReduceIndexed(Iterable<? extends T> iterable, Function3<? super Integer, ? super S, ? super T, ? extends S> function3) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$scanReduceIndexed");
        Intrinsics.checkParameterIsNotNull(function3, "operation");
        Iterator<T> iterator2 = iterable.iterator();
        if (!iterator2.hasNext()) {
            return CollectionsKt.emptyList();
        }
        T t = iterator2.next();
        ArrayList<Object> arrayList = new ArrayList<Object>(CollectionsKt.collectionSizeOrDefault(iterable, 10));
        arrayList.add(t);
        int n = 1;
        iterable = t;
        do {
            int n2 = n;
            if (!iterator2.hasNext()) return arrayList;
            n = n2 + 1;
            iterable = function3.invoke((Integer)n2, iterable, iterator2.next());
            arrayList.add(iterable);
        } while (true);
    }

    public static final <T> T single(Iterable<? extends T> iterable) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$single");
        if (iterable instanceof List) {
            return CollectionsKt.single((List)iterable);
        }
        Iterator<T> iterator2 = iterable.iterator();
        if (!iterator2.hasNext()) throw (Throwable)new NoSuchElementException("Collection is empty.");
        iterable = iterator2.next();
        if (iterator2.hasNext()) throw (Throwable)new IllegalArgumentException("Collection has more than one element.");
        return (T)iterable;
    }

    public static final <T> T single(Iterable<? extends T> iterable, Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$single");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        Iterator<T> iterator2 = iterable.iterator();
        iterable = null;
        boolean bl = false;
        do {
            if (!iterator2.hasNext()) {
                if (!bl) throw (Throwable)new NoSuchElementException("Collection contains no element matching the predicate.");
                return (T)iterable;
            }
            T t = iterator2.next();
            if (!function1.invoke(t).booleanValue()) continue;
            if (bl) throw (Throwable)new IllegalArgumentException("Collection contains more than one matching element.");
            iterable = t;
            bl = true;
        } while (true);
    }

    public static final <T> T single(List<? extends T> list) {
        Intrinsics.checkParameterIsNotNull(list, "$this$single");
        int n = list.size();
        if (n == 0) throw (Throwable)new NoSuchElementException("List is empty.");
        if (n != 1) throw (Throwable)new IllegalArgumentException("List has more than one element.");
        return list.get(0);
    }

    public static final <T> T singleOrNull(Iterable<? extends T> object) {
        Intrinsics.checkParameterIsNotNull(object, "$this$singleOrNull");
        boolean bl = object instanceof List;
        Iterator<T> iterator2 = null;
        if (bl) {
            List list = (List)object;
            object = iterator2;
            if (list.size() != 1) return (T)object;
            object = list.get(0);
            return (T)object;
        }
        iterator2 = object.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        object = iterator2.next();
        if (!iterator2.hasNext()) return (T)object;
        return null;
    }

    public static final <T> T singleOrNull(Iterable<? extends T> iterable, Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(iterable, "$this$singleOrNull");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        Iterator<T> iterator2 = iterable.iterator();
        boolean bl = false;
        iterable = null;
        do {
            if (!iterator2.hasNext()) {
                if (bl) return (T)iterable;
                return null;
            }
            T t = iterator2.next();
            if (!function1.invoke(t).booleanValue()) continue;
            if (bl) {
                return null;
            }
            bl = true;
            iterable = t;
        } while (true);
    }

    public static final <T> T singleOrNull(List<? extends T> list) {
        Intrinsics.checkParameterIsNotNull(list, "$this$singleOrNull");
        if (list.size() == 1) {
            list = list.get(0);
            return (T)list;
        }
        list = null;
        return (T)list;
    }

    public static final <T> List<T> slice(List<? extends T> list, Iterable<Integer> object) {
        Intrinsics.checkParameterIsNotNull(list, "$this$slice");
        Intrinsics.checkParameterIsNotNull(object, "indices");
        int n = CollectionsKt.collectionSizeOrDefault(object, 10);
        if (n == 0) {
            return CollectionsKt.emptyList();
        }
        ArrayList<T> arrayList = new ArrayList<T>(n);
        object = object.iterator();
        while (object.hasNext()) {
            arrayList.add(list.get(((Number)object.next()).intValue()));
        }
        return arrayList;
    }

    public static final <T> List<T> slice(List<? extends T> list, IntRange intRange) {
        Intrinsics.checkParameterIsNotNull(list, "$this$slice");
        Intrinsics.checkParameterIsNotNull(intRange, "indices");
        if (!intRange.isEmpty()) return CollectionsKt.toList((Iterable)list.subList((Integer)intRange.getStart(), (Integer)intRange.getEndInclusive() + 1));
        return CollectionsKt.emptyList();
    }

    public static final <T, R extends Comparable<? super R>> void sortBy(List<T> list, Function1<? super T, ? extends R> function1) {
        Intrinsics.checkParameterIsNotNull(list, "$this$sortBy");
        Intrinsics.checkParameterIsNotNull(function1, "selector");
        if (list.size() <= 1) return;
        CollectionsKt.sortWith(list, }
    java.lang.IllegalStateException: Inner class got unexpected class file - revert this change
    
    