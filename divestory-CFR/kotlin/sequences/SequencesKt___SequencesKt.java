/*
 * Decompiled with CFR <Could not determine version>.
 * 
 * Could not load the following classes:
 *  kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareBy
 *  kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareByDescending
 *  kotlin.sequences.SequencesKt___SequencesKt$asIterable$
 *  kotlin.sequences.SequencesKt___SequencesKt$asIterable$$inlined
 *  kotlin.sequences.SequencesKt___SequencesKt$asIterable$$inlined$Iterable
 *  kotlin.sequences.SequencesKt___SequencesKt$distinct
 *  kotlin.sequences.SequencesKt___SequencesKt$elementAt
 *  kotlin.sequences.SequencesKt___SequencesKt$filterIndexed
 *  kotlin.sequences.SequencesKt___SequencesKt$filterIsInstance
 *  kotlin.sequences.SequencesKt___SequencesKt$filterNotNull
 *  kotlin.sequences.SequencesKt___SequencesKt$flatMap
 *  kotlin.sequences.SequencesKt___SequencesKt$groupingBy
 *  kotlin.sequences.SequencesKt___SequencesKt$minus
 *  kotlin.sequences.SequencesKt___SequencesKt$onEach
 *  kotlin.sequences.SequencesKt___SequencesKt$requireNoNulls
 *  kotlin.sequences.SequencesKt___SequencesKt$scan
 *  kotlin.sequences.SequencesKt___SequencesKt$scanIndexed
 *  kotlin.sequences.SequencesKt___SequencesKt$scanReduce
 *  kotlin.sequences.SequencesKt___SequencesKt$scanReduceIndexed
 *  kotlin.sequences.SequencesKt___SequencesKt$sorted
 *  kotlin.sequences.SequencesKt___SequencesKt$sortedWith
 *  kotlin.sequences.SequencesKt___SequencesKt$zip
 *  kotlin.sequences.SequencesKt___SequencesKt$zipWithNext
 */
package kotlin.sequences;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import kotlin.Metadata;
import kotlin.Pair;
import kotlin.TypeCastException;
import kotlin.Unit;
import kotlin.collections.ArraysKt;
import kotlin.collections.CollectionsKt;
import kotlin.collections.Grouping;
import kotlin.collections.IndexedValue;
import kotlin.collections.SetsKt;
import kotlin.collections.SlidingWindowKt;
import kotlin.comparisons.ComparisonsKt;
import kotlin.comparisons.ComparisonsKt__ComparisonsKt;
import kotlin.coroutines.Continuation;
import kotlin.internal.PlatformImplementationsKt;
import kotlin.jvm.functions.Function1;
import kotlin.jvm.functions.Function2;
import kotlin.jvm.functions.Function3;
import kotlin.jvm.internal.DoubleCompanionObject;
import kotlin.jvm.internal.Intrinsics;
import kotlin.sequences.DistinctSequence;
import kotlin.sequences.DropSequence;
import kotlin.sequences.DropTakeSequence;
import kotlin.sequences.DropWhileSequence;
import kotlin.sequences.FilteringSequence;
import kotlin.sequences.FlatteningSequence;
import kotlin.sequences.IndexingSequence;
import kotlin.sequences.MergingSequence;
import kotlin.sequences.Sequence;
import kotlin.sequences.SequencesKt;
import kotlin.sequences.SequencesKt___SequencesJvmKt;
import kotlin.sequences.SequencesKt___SequencesKt;
import kotlin.sequences.SequencesKt___SequencesKt$asIterable$;
import kotlin.sequences.TakeSequence;
import kotlin.sequences.TakeWhileSequence;
import kotlin.sequences.TransformingIndexedSequence;
import kotlin.sequences.TransformingSequence;
import kotlin.text.StringsKt;

/*
 * Duplicate member names - consider using --renamedupmembers true
 * Exception performing whole class analysis.
 */
@Metadata(bv={1, 0, 3}, d1={"\u0000\u0088\u0002\n\u0000\n\u0002\u0010\u000b\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u001c\n\u0002\b\u0002\n\u0002\u0010$\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010%\n\u0002\b\b\n\u0002\u0010\u0006\n\u0002\u0010\u0005\n\u0002\b\u0002\n\u0002\u0010\u0007\n\u0000\n\u0002\u0010\b\n\u0000\n\u0002\u0010\t\n\u0000\n\u0002\u0010\n\n\u0002\b\u0002\n\u0002\u0010 \n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0012\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\u001f\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\u0000\n\u0002\b\u0012\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0002\b\u0004\n\u0002\u0010!\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\r\n\u0002\b\u0006\n\u0002\u0010\u000e\n\u0002\b\f\n\u0002\u0010\u000f\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0010\u0011\n\u0002\b(\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010#\n\u0000\n\u0002\u0010\"\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0006\u001a-\u0010\u0000\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a\u0016\u0010\u0006\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a-\u0010\u0006\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a\u001c\u0010\u0007\u001a\b\u0012\u0004\u0012\u0002H\u00020\b\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001f\u0010\t\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0087\b\u001aQ\u0010\n\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001e\u0010\u000e\u001a\u001a\u0012\u0004\u0012\u0002H\u0002\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000f0\u0005H\u0086\b\u001a?\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\u00020\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b\u001aY\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\b\u001aZ\u0010\u0013\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0018\b\u0002\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\u00020\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b\u00a2\u0006\u0002\u0010\u0017\u001at\u0010\u0013\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r\"\u0018\b\u0003\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\r0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\b\u00a2\u0006\u0002\u0010\u0018\u001al\u0010\u0019\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r\"\u0018\b\u0003\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\r0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u001e\u0010\u000e\u001a\u001a\u0012\u0004\u0012\u0002H\u0002\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000f0\u0005H\u0086\b\u00a2\u0006\u0002\u0010\u0017\u001a?\u0010\u001a\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000b\"\u0004\b\u0000\u0010\f\"\u0004\b\u0001\u0010\r*\b\u0012\u0004\u0012\u0002H\f0\u00032\u0012\u0010\u001b\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u0005H\u0087\b\u001aZ\u0010\u001c\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\f\"\u0004\b\u0001\u0010\r\"\u0018\b\u0002\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\r0\u0015*\b\u0012\u0004\u0012\u0002H\f0\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u001b\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u0005H\u0087\b\u00a2\u0006\u0002\u0010\u0017\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020\u001f0\u0003H\u0007\u00a2\u0006\u0002\b \u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007\u00a2\u0006\u0002\b!\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007\u00a2\u0006\u0002\b#\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020$0\u0003H\u0007\u00a2\u0006\u0002\b%\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020&0\u0003H\u0007\u00a2\u0006\u0002\b'\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020(0\u0003H\u0007\u00a2\u0006\u0002\b)\u001a,\u0010*\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+0\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010,\u001a\u00020$H\u0007\u001aF\u0010*\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010,\u001a\u00020$2\u0018\u0010\u000e\u001a\u0014\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+\u0012\u0004\u0012\u0002H-0\u0005H\u0007\u001a+\u0010.\u001a\u00020\u0001\"\t\b\u0000\u0010\u0002\u00a2\u0006\u0002\b/*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00100\u001a\u0002H\u0002H\u0086\u0002\u00a2\u0006\u0002\u00101\u001a\u0016\u00102\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a-\u00102\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a\u001c\u00103\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a6\u00104\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005\u001a$\u00106\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00107\u001a\u00020$\u001a0\u00108\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005\u001a#\u00109\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010:\u001a\u00020$\u00a2\u0006\u0002\u0010;\u001a7\u0010<\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010:\u001a\u00020$2\u0012\u0010=\u001a\u000e\u0012\u0004\u0012\u00020$\u0012\u0004\u0012\u0002H\u00020\u0005\u00a2\u0006\u0002\u0010>\u001a%\u0010?\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010:\u001a\u00020$\u00a2\u0006\u0002\u0010;\u001a0\u0010@\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005\u001aE\u0010A\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032'\u0010\u0004\u001a#\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010B\u001aa\u0010E\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2'\u0010\u0004\u001a#\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010BH\u0086\b\u00a2\u0006\u0002\u0010H\u001a$\u0010I\u001a\r\u0012\t\u0012\u0007H-\u00a2\u0006\u0002\bJ0\u0003\"\u0006\b\u0000\u0010-\u0018\u0001*\u0006\u0012\u0002\b\u00030\u0003H\u0086\b\u001a8\u0010K\u001a\u0002HF\"\u0006\b\u0000\u0010-\u0018\u0001\"\u0010\b\u0001\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H-0G*\u0006\u0012\u0002\b\u00030\u00032\u0006\u0010\u0016\u001a\u0002HFH\u0086\b\u00a2\u0006\u0002\u0010L\u001a0\u0010M\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005\u001a\"\u0010N\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\b\b\u0000\u0010\u0002*\u00020O*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u0003\u001a;\u0010P\u001a\u0002HF\"\u0010\b\u0000\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020G\"\b\b\u0001\u0010\u0002*\u00020O*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF\u00a2\u0006\u0002\u0010L\u001aL\u0010Q\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00a2\u0006\u0002\u0010R\u001aL\u0010S\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00a2\u0006\u0002\u0010R\u001a4\u0010T\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0087\b\u00a2\u0006\u0002\u0010U\u001a4\u0010V\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0087\b\u00a2\u0006\u0002\u0010U\u001a\u001b\u0010W\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u00a2\u0006\u0002\u0010X\u001a2\u0010W\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00a2\u0006\u0002\u0010U\u001a\u001d\u0010Y\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u00a2\u0006\u0002\u0010X\u001a4\u0010Y\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00a2\u0006\u0002\u0010U\u001a<\u0010Z\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0018\u0010\u000e\u001a\u0014\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H-0\u00030\u0005\u001aX\u0010[\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0010\b\u0002\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H-0G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2\u0018\u0010\u000e\u001a\u0014\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H-0\u00030\u0005H\u0086\b\u00a2\u0006\u0002\u0010R\u001aU\u0010\\\u001a\u0002H-\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010]\u001a\u0002H-2'\u0010^\u001a#\u0012\u0013\u0012\u0011H-\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(_\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0BH\u0086\b\u00a2\u0006\u0002\u0010`\u001aj\u0010a\u001a\u0002H-\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010]\u001a\u0002H-2<\u0010^\u001a8\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0013\u0012\u0011H-\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(_\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0bH\u0086\b\u00a2\u0006\u0002\u0010c\u001a-\u0010d\u001a\u00020e\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010f\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020e0\u0005H\u0086\b\u001aB\u0010g\u001a\u00020e\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032'\u0010f\u001a#\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020e0BH\u0086\b\u001aE\u0010h\u001a\u0014\u0012\u0004\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b\u001a_\u0010h\u001a\u0014\u0012\u0004\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\r0+0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\b\u001a^\u0010i\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u001c\b\u0002\u0010\u0014*\u0016\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020j0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b\u00a2\u0006\u0002\u0010\u0017\u001ax\u0010i\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r\"\u001c\b\u0003\u0010\u0014*\u0016\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\r0j0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\b\u00a2\u0006\u0002\u0010\u0018\u001aA\u0010k\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0l\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0014\b\u0004\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0087\b\u001a(\u0010m\u001a\u00020$\"\t\b\u0000\u0010\u0002\u00a2\u0006\u0002\b/*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00100\u001a\u0002H\u0002\u00a2\u0006\u0002\u0010n\u001a-\u0010o\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a-\u0010p\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a{\u0010q\u001a\u0002Hr\"\u0004\b\u0000\u0010\u0002\"\f\b\u0001\u0010r*\u00060sj\u0002`t*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010u\u001a\u0002Hr2\b\b\u0002\u0010v\u001a\u00020w2\b\b\u0002\u0010x\u001a\u00020w2\b\b\u0002\u0010y\u001a\u00020w2\b\b\u0002\u0010z\u001a\u00020$2\b\b\u0002\u0010{\u001a\u00020w2\u0016\b\u0002\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020w\u0018\u00010\u0005\u00a2\u0006\u0002\u0010|\u001a`\u0010}\u001a\u00020~\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\b\b\u0002\u0010v\u001a\u00020w2\b\b\u0002\u0010x\u001a\u00020w2\b\b\u0002\u0010y\u001a\u00020w2\b\b\u0002\u0010z\u001a\u00020$2\b\b\u0002\u0010{\u001a\u00020w2\u0016\b\u0002\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020w\u0018\u00010\u0005\u001a\u001b\u0010\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u00a2\u0006\u0002\u0010X\u001a2\u0010\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00a2\u0006\u0002\u0010U\u001a)\u0010\u0001\u001a\u00020$\"\t\b\u0000\u0010\u0002\u00a2\u0006\u0002\b/*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00100\u001a\u0002H\u0002\u00a2\u0006\u0002\u0010n\u001a\u001e\u0010\u0081\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u00a2\u0006\u0002\u0010X\u001a5\u0010\u0081\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00a2\u0006\u0002\u0010U\u001a7\u0010\u0082\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u000e\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005\u001aL\u0010\u0083\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032'\u0010\u000e\u001a#\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0B\u001aR\u0010\u0084\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010-*\u00020O*\b\u0012\u0004\u0012\u0002H\u00020\u00032)\u0010\u000e\u001a%\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0B\u001an\u0010\u0085\u0001\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010-*\u00020O\"\u0010\b\u0002\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H-0G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2)\u0010\u000e\u001a%\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0BH\u0086\b\u00a2\u0006\u0002\u0010H\u001ah\u0010\u0086\u0001\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0010\b\u0002\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H-0G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2'\u0010\u000e\u001a#\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0BH\u0086\b\u00a2\u0006\u0002\u0010H\u001a=\u0010\u0087\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010-*\u00020O*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0014\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005\u001aY\u0010\u0088\u0001\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010-*\u00020O\"\u0010\b\u0002\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H-0G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2\u0014\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\b\u00a2\u0006\u0002\u0010R\u001aS\u0010\u0089\u0001\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0010\b\u0002\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H-0G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2\u0012\u0010\u000e\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0086\b\u00a2\u0006\u0002\u0010R\u001a*\u0010\u008a\u0001\u001a\u0004\u0018\u0001H\u0002\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u008b\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u00a2\u0006\u0003\u0010\u008c\u0001\u001a\u001b\u0010\u008a\u0001\u001a\u0004\u0018\u00010\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007\u00a2\u0006\u0003\u0010\u008d\u0001\u001a\u001b\u0010\u008a\u0001\u001a\u0004\u0018\u00010\"*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007\u00a2\u0006\u0003\u0010\u008e\u0001\u001aF\u0010\u008f\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u008b\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0086\b\u00a2\u0006\u0002\u0010U\u001a>\u0010\u0090\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010\u0091\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020\u0092\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`\u0093\u0001\u00a2\u0006\u0003\u0010\u0094\u0001\u001a*\u0010\u0095\u0001\u001a\u0004\u0018\u0001H\u0002\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u008b\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u00a2\u0006\u0003\u0010\u008c\u0001\u001a\u001b\u0010\u0095\u0001\u001a\u0004\u0018\u00010\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007\u00a2\u0006\u0003\u0010\u008d\u0001\u001a\u001b\u0010\u0095\u0001\u001a\u0004\u0018\u00010\"*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007\u00a2\u0006\u0003\u0010\u008e\u0001\u001aF\u0010\u0096\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u008b\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0086\b\u00a2\u0006\u0002\u0010U\u001a>\u0010\u0097\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010\u0091\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020\u0092\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`\u0093\u0001\u00a2\u0006\u0003\u0010\u0094\u0001\u001a.\u0010\u0098\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00100\u001a\u0002H\u0002H\u0086\u0002\u00a2\u0006\u0003\u0010\u0099\u0001\u001a8\u0010\u0098\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0010\u0010\u009a\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H\u00020\u009b\u0001H\u0086\u0002\u00a2\u0006\u0003\u0010\u009c\u0001\u001a/\u0010\u0098\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u009a\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\bH\u0086\u0002\u001a/\u0010\u0098\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u009a\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0002\u001a.\u0010\u009d\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00100\u001a\u0002H\u0002H\u0087\b\u00a2\u0006\u0003\u0010\u0099\u0001\u001a\u0017\u0010\u009e\u0001\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a.\u0010\u009e\u0001\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a3\u0010\u009f\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010f\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020e0\u0005H\u0007\u001aF\u0010\u00a0\u0001\u001a\u001a\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+0\u000f\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a.\u0010\u00a1\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00100\u001a\u0002H\u0002H\u0086\u0002\u00a2\u0006\u0003\u0010\u0099\u0001\u001a8\u0010\u00a1\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0010\u0010\u009a\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H\u00020\u009b\u0001H\u0086\u0002\u00a2\u0006\u0003\u0010\u009c\u0001\u001a/\u0010\u00a1\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u009a\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\bH\u0086\u0002\u001a/\u0010\u00a1\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u009a\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0002\u001a.\u0010\u00a2\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00100\u001a\u0002H\u0002H\u0087\b\u00a2\u0006\u0003\u0010\u0099\u0001\u001aX\u0010\u00a3\u0001\u001a\u0003H\u00a4\u0001\"\u0005\b\u0000\u0010\u00a4\u0001\"\t\b\u0001\u0010\u0002*\u0003H\u00a4\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032)\u0010^\u001a%\u0012\u0014\u0012\u0012H\u00a4\u0001\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(_\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003H\u00a4\u00010BH\u0086\b\u00a2\u0006\u0003\u0010\u00a5\u0001\u001am\u0010\u00a6\u0001\u001a\u0003H\u00a4\u0001\"\u0005\b\u0000\u0010\u00a4\u0001\"\t\b\u0001\u0010\u0002*\u0003H\u00a4\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032>\u0010^\u001a:\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0014\u0012\u0012H\u00a4\u0001\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(_\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003H\u00a4\u00010bH\u0086\b\u00a2\u0006\u0003\u0010\u00a7\u0001\u001aZ\u0010\u00a8\u0001\u001a\u0005\u0018\u0001H\u00a4\u0001\"\u0005\b\u0000\u0010\u00a4\u0001\"\t\b\u0001\u0010\u0002*\u0003H\u00a4\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032)\u0010^\u001a%\u0012\u0014\u0012\u0012H\u00a4\u0001\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(_\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003H\u00a4\u00010BH\u0087\b\u00a2\u0006\u0003\u0010\u00a5\u0001\u001a#\u0010\u00a9\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\b\b\u0000\u0010\u0002*\u00020O*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u0003\u001a\\\u0010\u00aa\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010]\u001a\u0002H-2'\u0010^\u001a#\u0012\u0013\u0012\u0011H-\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(_\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0BH\u0007\u00a2\u0006\u0003\u0010\u00ab\u0001\u001aq\u0010\u00ac\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010]\u001a\u0002H-2<\u0010^\u001a8\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0013\u0012\u0011H-\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(_\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0bH\u0007\u00a2\u0006\u0003\u0010\u00ad\u0001\u001aW\u0010\u00ae\u0001\u001a\t\u0012\u0005\u0012\u0003H\u00a4\u00010\u0003\"\u0005\b\u0000\u0010\u00a4\u0001\"\t\b\u0001\u0010\u0002*\u0003H\u00a4\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032)\u0010^\u001a%\u0012\u0014\u0012\u0012H\u00a4\u0001\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(_\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003H\u00a4\u00010BH\u0007\u001al\u0010\u00af\u0001\u001a\t\u0012\u0005\u0012\u0003H\u00a4\u00010\u0003\"\u0005\b\u0000\u0010\u00a4\u0001\"\t\b\u0001\u0010\u0002*\u0003H\u00a4\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032>\u0010^\u001a:\u0012\u0013\u0012\u00110$\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0014\u0012\u0012H\u00a4\u0001\u00a2\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(_\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003H\u00a4\u00010bH\u0007\u001a\u001c\u0010\u00b0\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u00a2\u0006\u0002\u0010X\u001a3\u0010\u00b0\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00a2\u0006\u0002\u0010U\u001a\u001e\u0010\u00b1\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u00a2\u0006\u0002\u0010X\u001a5\u0010\u00b1\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00a2\u0006\u0002\u0010U\u001a(\u0010\u00b2\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u008b\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001aI\u0010\u00b3\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u008b\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0016\b\u0004\u00105\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\b\u001aI\u0010\u00b4\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u008b\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0016\b\u0004\u00105\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\b\u001a(\u0010\u00b5\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u008b\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a<\u0010\u00b6\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010\u0091\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020\u0092\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`\u0093\u0001\u001a\u0019\u0010\u00b7\u0001\u001a\u00020$*\b\u0012\u0004\u0012\u00020\u001f0\u0003H\u0007\u00a2\u0006\u0003\b\u00b8\u0001\u001a\u0019\u0010\u00b7\u0001\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007\u00a2\u0006\u0003\b\u00b9\u0001\u001a\u0019\u0010\u00b7\u0001\u001a\u00020\"*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007\u00a2\u0006\u0003\b\u00ba\u0001\u001a\u0019\u0010\u00b7\u0001\u001a\u00020$*\b\u0012\u0004\u0012\u00020$0\u0003H\u0007\u00a2\u0006\u0003\b\u00bb\u0001\u001a\u0019\u0010\u00b7\u0001\u001a\u00020&*\b\u0012\u0004\u0012\u00020&0\u0003H\u0007\u00a2\u0006\u0003\b\u00bc\u0001\u001a\u0019\u0010\u00b7\u0001\u001a\u00020$*\b\u0012\u0004\u0012\u00020(0\u0003H\u0007\u00a2\u0006\u0003\b\u00bd\u0001\u001a.\u0010\u00be\u0001\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020$0\u0005H\u0086\b\u001a.\u0010\u00bf\u0001\u001a\u00020\u001e\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u001e0\u0005H\u0086\b\u001a%\u0010\u00c0\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00107\u001a\u00020$\u001a1\u0010\u00c1\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005\u001a6\u0010\u00c2\u0001\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF\u00a2\u0006\u0002\u0010L\u001a)\u0010\u00c3\u0001\u001a\u0014\u0012\u0004\u0012\u0002H\u00020\u00c4\u0001j\t\u0012\u0004\u0012\u0002H\u0002`\u00c5\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001d\u0010\u00c6\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001d\u0010\u00c7\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020j\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001e\u0010\u00c8\u0001\u001a\t\u0012\u0004\u0012\u0002H\u00020\u00c9\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001e\u0010\u00ca\u0001\u001a\t\u0012\u0004\u0012\u0002H\u00020\u00cb\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001aC\u0010\u00cc\u0001\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+0\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010,\u001a\u00020$2\t\b\u0002\u0010\u00cd\u0001\u001a\u00020$2\t\b\u0002\u0010\u00ce\u0001\u001a\u00020\u0001H\u0007\u001a]\u0010\u00cc\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010,\u001a\u00020$2\t\b\u0002\u0010\u00cd\u0001\u001a\u00020$2\t\b\u0002\u0010\u00ce\u0001\u001a\u00020\u00012\u0018\u0010\u000e\u001a\u0014\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+\u0012\u0004\u0012\u0002H-0\u0005H\u0007\u001a$\u0010\u00cf\u0001\u001a\u000f\u0012\u000b\u0012\t\u0012\u0004\u0012\u0002H\u00020\u00d0\u00010\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001aA\u0010\u00d1\u0001\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u000f0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u00d2\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003H\u0086\u0004\u001ar\u0010\u00d1\u0001\u001a\b\u0012\u0004\u0012\u0002H\r0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u00d2\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u000328\u0010\u000e\u001a4\u0012\u0014\u0012\u0012H\u0002\u00a2\u0006\r\bC\u0012\t\bD\u0012\u0005\b\b(\u00d3\u0001\u0012\u0014\u0012\u0012H-\u00a2\u0006\r\bC\u0012\t\bD\u0012\u0005\b\b(\u00d4\u0001\u0012\u0004\u0012\u0002H\r0B\u001a+\u0010\u00d5\u0001\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\u00020\u000f0\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0007\u001a_\u0010\u00d5\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u000328\u0010\u000e\u001a4\u0012\u0014\u0012\u0012H\u0002\u00a2\u0006\r\bC\u0012\t\bD\u0012\u0005\b\b(\u00d3\u0001\u0012\u0014\u0012\u0012H\u0002\u00a2\u0006\r\bC\u0012\t\bD\u0012\u0005\b\b(\u00d4\u0001\u0012\u0004\u0012\u0002H-0BH\u0007\u00a8\u0006\u00d6\u0001"}, d2={"all", "", "T", "Lkotlin/sequences/Sequence;", "predicate", "Lkotlin/Function1;", "any", "asIterable", "", "asSequence", "associate", "", "K", "V", "transform", "Lkotlin/Pair;", "associateBy", "keySelector", "valueTransform", "associateByTo", "M", "", "destination", "(Lkotlin/sequences/Sequence;Ljava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "(Lkotlin/sequences/Sequence;Ljava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "associateTo", "associateWith", "valueSelector", "associateWithTo", "average", "", "", "averageOfByte", "averageOfDouble", "", "averageOfFloat", "", "averageOfInt", "", "averageOfLong", "", "averageOfShort", "chunked", "", "size", "R", "contains", "Lkotlin/internal/OnlyInputTypes;", "element", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;)Z", "count", "distinct", "distinctBy", "selector", "drop", "n", "dropWhile", "elementAt", "index", "(Lkotlin/sequences/Sequence;I)Ljava/lang/Object;", "elementAtOrElse", "defaultValue", "(Lkotlin/sequences/Sequence;ILkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "elementAtOrNull", "filter", "filterIndexed", "Lkotlin/Function2;", "Lkotlin/ParameterName;", "name", "filterIndexedTo", "C", "", "(Lkotlin/sequences/Sequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function2;)Ljava/util/Collection;", "filterIsInstance", "Lkotlin/internal/NoInfer;", "filterIsInstanceTo", "(Lkotlin/sequences/Sequence;Ljava/util/Collection;)Ljava/util/Collection;", "filterNot", "filterNotNull", "", "filterNotNullTo", "filterNotTo", "(Lkotlin/sequences/Sequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;", "filterTo", "find", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "findLast", "first", "(Lkotlin/sequences/Sequence;)Ljava/lang/Object;", "firstOrNull", "flatMap", "flatMapTo", "fold", "initial", "operation", "acc", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "foldIndexed", "Lkotlin/Function3;", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "forEach", "", "action", "forEachIndexed", "groupBy", "groupByTo", "", "groupingBy", "Lkotlin/collections/Grouping;", "indexOf", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;)I", "indexOfFirst", "indexOfLast", "joinTo", "A", "Ljava/lang/Appendable;", "Lkotlin/text/Appendable;", "buffer", "separator", "", "prefix", "postfix", "limit", "truncated", "(Lkotlin/sequences/Sequence;Ljava/lang/Appendable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Appendable;", "joinToString", "", "last", "lastIndexOf", "lastOrNull", "map", "mapIndexed", "mapIndexedNotNull", "mapIndexedNotNullTo", "mapIndexedTo", "mapNotNull", "mapNotNullTo", "mapTo", "max", "", "(Lkotlin/sequences/Sequence;)Ljava/lang/Comparable;", "(Lkotlin/sequences/Sequence;)Ljava/lang/Double;", "(Lkotlin/sequences/Sequence;)Ljava/lang/Float;", "maxBy", "maxWith", "comparator", "Ljava/util/Comparator;", "Lkotlin/Comparator;", "(Lkotlin/sequences/Sequence;Ljava/util/Comparator;)Ljava/lang/Object;", "min", "minBy", "minWith", "minus", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;)Lkotlin/sequences/Sequence;", "elements", "", "(Lkotlin/sequences/Sequence;[Ljava/lang/Object;)Lkotlin/sequences/Sequence;", "minusElement", "none", "onEach", "partition", "plus", "plusElement", "reduce", "S", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "reduceIndexed", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "reduceOrNull", "requireNoNulls", "scan", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;", "scanIndexed", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Lkotlin/sequences/Sequence;", "scanReduce", "scanReduceIndexed", "single", "singleOrNull", "sorted", "sortedBy", "sortedByDescending", "sortedDescending", "sortedWith", "sum", "sumOfByte", "sumOfDouble", "sumOfFloat", "sumOfInt", "sumOfLong", "sumOfShort", "sumBy", "sumByDouble", "take", "takeWhile", "toCollection", "toHashSet", "Ljava/util/HashSet;", "Lkotlin/collections/HashSet;", "toList", "toMutableList", "toMutableSet", "", "toSet", "", "windowed", "step", "partialWindows", "withIndex", "Lkotlin/collections/IndexedValue;", "zip", "other", "a", "b", "zipWithNext", "kotlin-stdlib"}, k=5, mv={1, 1, 16}, xi=1, xs="kotlin/sequences/SequencesKt")
class SequencesKt___SequencesKt
extends SequencesKt___SequencesJvmKt {
    public static final <T> boolean all(Sequence<? extends T> object, Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(object, "$this$all");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        object = object.iterator();
        do {
            if (!object.hasNext()) return true;
        } while (function1.invoke(object.next()).booleanValue());
        return false;
    }

    public static final <T> boolean any(Sequence<? extends T> sequence) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$any");
        return sequence.iterator().hasNext();
    }

    public static final <T> boolean any(Sequence<? extends T> object, Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(object, "$this$any");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        object = object.iterator();
        do {
            if (!object.hasNext()) return false;
        } while (!function1.invoke(object.next()).booleanValue());
        return true;
    }

    public static final <T> Iterable<T> asIterable(Sequence<? extends T> sequence) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$asIterable");
        return new Iterable<T>(sequence){
            final /* synthetic */ Sequence $this_asIterable$inlined;
            {
                this.$this_asIterable$inlined = sequence;
            }

            public Iterator<T> iterator() {
                return this.$this_asIterable$inlined.iterator();
            }
        };
    }

    private static final <T> Sequence<T> asSequence(Sequence<? extends T> sequence) {
        return sequence;
    }

    public static final <T, K, V> Map<K, V> associate(Sequence<? extends T> object, Function1<? super T, ? extends Pair<? extends K, ? extends V>> function1) {
        Intrinsics.checkParameterIsNotNull(object, "$this$associate");
        Intrinsics.checkParameterIsNotNull(function1, "transform");
        Map map = new LinkedHashMap();
        Iterator<T> iterator2 = object.iterator();
        while (iterator2.hasNext()) {
            object = function1.invoke(iterator2.next());
            map.put(((Pair)object).getFirst(), ((Pair)object).getSecond());
        }
        return map;
    }

    public static final <T, K> Map<K, T> associateBy(Sequence<? extends T> object, Function1<? super T, ? extends K> function1) {
        Intrinsics.checkParameterIsNotNull(object, "$this$associateBy");
        Intrinsics.checkParameterIsNotNull(function1, "keySelector");
        Map map = new LinkedHashMap();
        object = object.iterator();
        while (object.hasNext()) {
            Object e = object.next();
            map.put(function1.invoke(e), e);
        }
        return map;
    }

    public static final <T, K, V> Map<K, V> associateBy(Sequence<? extends T> object, Function1<? super T, ? extends K> function1, Function1<? super T, ? extends V> function12) {
        Intrinsics.checkParameterIsNotNull(object, "$this$associateBy");
        Intrinsics.checkParameterIsNotNull(function1, "keySelector");
        Intrinsics.checkParameterIsNotNull(function12, "valueTransform");
        Map map = new LinkedHashMap();
        object = object.iterator();
        while (object.hasNext()) {
            Object e = object.next();
            map.put(function1.invoke(e), function12.invoke(e));
        }
        return map;
    }

    public static final <T, K, M extends Map<? super K, ? super T>> M associateByTo(Sequence<? extends T> sequence, M m, Function1<? super T, ? extends K> function1) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$associateByTo");
        Intrinsics.checkParameterIsNotNull(m, "destination");
        Intrinsics.checkParameterIsNotNull(function1, "keySelector");
        Iterator<T> iterator2 = sequence.iterator();
        while (iterator2.hasNext()) {
            sequence = iterator2.next();
            m.put(function1.invoke(sequence), sequence);
        }
        return m;
    }

    public static final <T, K, V, M extends Map<? super K, ? super V>> M associateByTo(Sequence<? extends T> object, M m, Function1<? super T, ? extends K> function1, Function1<? super T, ? extends V> function12) {
        Intrinsics.checkParameterIsNotNull(object, "$this$associateByTo");
        Intrinsics.checkParameterIsNotNull(m, "destination");
        Intrinsics.checkParameterIsNotNull(function1, "keySelector");
        Intrinsics.checkParameterIsNotNull(function12, "valueTransform");
        object = object.iterator();
        while (object.hasNext()) {
            Object e = object.next();
            m.put(function1.invoke(e), function12.invoke(e));
        }
        return m;
    }

    public static final <T, K, V, M extends Map<? super K, ? super V>> M associateTo(Sequence<? extends T> object, M m, Function1<? super T, ? extends Pair<? extends K, ? extends V>> function1) {
        Intrinsics.checkParameterIsNotNull(object, "$this$associateTo");
        Intrinsics.checkParameterIsNotNull(m, "destination");
        Intrinsics.checkParameterIsNotNull(function1, "transform");
        object = object.iterator();
        while (object.hasNext()) {
            Pair<K, V> pair = function1.invoke(object.next());
            m.put(pair.getFirst(), pair.getSecond());
        }
        return m;
    }

    public static final <K, V> Map<K, V> associateWith(Sequence<? extends K> object, Function1<? super K, ? extends V> function1) {
        Intrinsics.checkParameterIsNotNull(object, "$this$associateWith");
        Intrinsics.checkParameterIsNotNull(function1, "valueSelector");
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        object = object.iterator();
        while (object.hasNext()) {
            Object e = object.next();
            ((Map)linkedHashMap).put(e, function1.invoke(e));
        }
        return linkedHashMap;
    }

    public static final <K, V, M extends Map<? super K, ? super V>> M associateWithTo(Sequence<? extends K> object, M m, Function1<? super K, ? extends V> function1) {
        Intrinsics.checkParameterIsNotNull(object, "$this$associateWithTo");
        Intrinsics.checkParameterIsNotNull(m, "destination");
        Intrinsics.checkParameterIsNotNull(function1, "valueSelector");
        object = object.iterator();
        while (object.hasNext()) {
            Object e = object.next();
            m.put(e, function1.invoke(e));
        }
        return m;
    }

    public static final double averageOfByte(Sequence<Byte> object) {
        Intrinsics.checkParameterIsNotNull(object, "$this$average");
        object = object.iterator();
        double d = 0.0;
        int n = 0;
        while (object.hasNext()) {
            double d2 = d + (double)((Number)object.next()).byteValue();
            int n2 = n + 1;
            d = d2;
            n = n2;
            if (n2 >= 0) continue;
            CollectionsKt.throwCountOverflow();
            d = d2;
            n = n2;
        }
        if (n == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        d /= (double)n;
        return d;
    }

    public static final double averageOfDouble(Sequence<Double> object) {
        Intrinsics.checkParameterIsNotNull(object, "$this$average");
        object = object.iterator();
        double d = 0.0;
        int n = 0;
        while (object.hasNext()) {
            double d2 = d + ((Number)object.next()).doubleValue();
            int n2 = n + 1;
            d = d2;
            n = n2;
            if (n2 >= 0) continue;
            CollectionsKt.throwCountOverflow();
            d = d2;
            n = n2;
        }
        if (n == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        d /= (double)n;
        return d;
    }

    public static final double averageOfFloat(Sequence<Float> object) {
        Intrinsics.checkParameterIsNotNull(object, "$this$average");
        object = object.iterator();
        double d = 0.0;
        int n = 0;
        while (object.hasNext()) {
            double d2 = d + (double)((Number)object.next()).floatValue();
            int n2 = n + 1;
            d = d2;
            n = n2;
            if (n2 >= 0) continue;
            CollectionsKt.throwCountOverflow();
            d = d2;
            n = n2;
        }
        if (n == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        d /= (double)n;
        return d;
    }

    public static final double averageOfInt(Sequence<Integer> object) {
        Intrinsics.checkParameterIsNotNull(object, "$this$average");
        object = object.iterator();
        double d = 0.0;
        int n = 0;
        while (object.hasNext()) {
            double d2 = d + (double)((Number)object.next()).intValue();
            int n2 = n + 1;
            d = d2;
            n = n2;
            if (n2 >= 0) continue;
            CollectionsKt.throwCountOverflow();
            d = d2;
            n = n2;
        }
        if (n == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        d /= (double)n;
        return d;
    }

    public static final double averageOfLong(Sequence<Long> object) {
        Intrinsics.checkParameterIsNotNull(object, "$this$average");
        object = object.iterator();
        double d = 0.0;
        int n = 0;
        while (object.hasNext()) {
            double d2 = d + (double)((Number)object.next()).longValue();
            int n2 = n + 1;
            d = d2;
            n = n2;
            if (n2 >= 0) continue;
            CollectionsKt.throwCountOverflow();
            d = d2;
            n = n2;
        }
        if (n == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        d /= (double)n;
        return d;
    }

    public static final double averageOfShort(Sequence<Short> object) {
        Intrinsics.checkParameterIsNotNull(object, "$this$average");
        object = object.iterator();
        double d = 0.0;
        int n = 0;
        while (object.hasNext()) {
            double d2 = d + (double)((Number)object.next()).shortValue();
            int n2 = n + 1;
            d = d2;
            n = n2;
            if (n2 >= 0) continue;
            CollectionsKt.throwCountOverflow();
            d = d2;
            n = n2;
        }
        if (n == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        d /= (double)n;
        return d;
    }

    public static final <T> Sequence<List<T>> chunked(Sequence<? extends T> sequence, int n) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$chunked");
        return SequencesKt.windowed(sequence, n, n, true);
    }

    public static final <T, R> Sequence<R> chunked(Sequence<? extends T> sequence, int n, Function1<? super List<? extends T>, ? extends R> function1) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$chunked");
        Intrinsics.checkParameterIsNotNull(function1, "transform");
        return SequencesKt.windowed(sequence, n, n, true, function1);
    }

    public static final <T> boolean contains(Sequence<? extends T> sequence, T t) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$contains");
        if (SequencesKt.indexOf(sequence, t) < 0) return false;
        return true;
    }

    public static final <T> int count(Sequence<? extends T> object) {
        Intrinsics.checkParameterIsNotNull(object, "$this$count");
        object = object.iterator();
        int n = 0;
        while (object.hasNext()) {
            int n2;
            object.next();
            n = n2 = n + 1;
            if (n2 >= 0) continue;
            CollectionsKt.throwCountOverflow();
            n = n2;
        }
        return n;
    }

    public static final <T> int count(Sequence<? extends T> object, Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(object, "$this$count");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        object = object.iterator();
        int n = 0;
        while (object.hasNext()) {
            int n2;
            if (!function1.invoke(object.next()).booleanValue()) continue;
            n = n2 = n + 1;
            if (n2 >= 0) continue;
            if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) throw (Throwable)new ArithmeticException("Count overflow has happened.");
            CollectionsKt.throwCountOverflow();
            n = n2;
        }
        return n;
    }

    public static final <T> Sequence<T> distinct(Sequence<? extends T> sequence) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$distinct");
        return SequencesKt.distinctBy(sequence, distinct.1.INSTANCE);
    }

    public static final <T, K> Sequence<T> distinctBy(Sequence<? extends T> sequence, Function1<? super T, ? extends K> function1) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$distinctBy");
        Intrinsics.checkParameterIsNotNull(function1, "selector");
        return new DistinctSequence<T, K>(sequence, function1);
    }

    public static final <T> Sequence<T> drop(Sequence<? extends T> sequence, int n) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$drop");
        boolean bl = n >= 0;
        if (!bl) {
            sequence = new StringBuilder();
            ((StringBuilder)((Object)sequence)).append("Requested element count ");
            ((StringBuilder)((Object)sequence)).append(n);
            ((StringBuilder)((Object)sequence)).append(" is less than zero.");
            throw (Throwable)new IllegalArgumentException(((StringBuilder)((Object)sequence)).toString().toString());
        }
        if (n == 0) {
            return sequence;
        }
        if (!(sequence instanceof DropTakeSequence)) return new DropSequence(sequence, n);
        return ((DropTakeSequence)sequence).drop(n);
    }

    public static final <T> Sequence<T> dropWhile(Sequence<? extends T> sequence, Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$dropWhile");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        return new DropWhileSequence<T>(sequence, function1);
    }

    public static final <T> T elementAt(Sequence<? extends T> sequence, int n) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$elementAt");
        return SequencesKt.elementAtOrElse(sequence, n, new Function1(n){
            final /* synthetic */ int $index;
            {
                this.$index = n;
                super(1);
            }

            public final java.lang.Void invoke(int n) {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Sequence doesn't contain element at index ");
                stringBuilder.append(this.$index);
                stringBuilder.append('.');
                throw (Throwable)new java.lang.IndexOutOfBoundsException(stringBuilder.toString());
            }
        });
    }

    public static final <T> T elementAtOrElse(Sequence<? extends T> sequence, int n, Function1<? super Integer, ? extends T> function1) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$elementAtOrElse");
        Intrinsics.checkParameterIsNotNull(function1, "defaultValue");
        if (n < 0) {
            return function1.invoke((Integer)n);
        }
        Iterator<T> iterator2 = sequence.iterator();
        int n2 = 0;
        while (iterator2.hasNext()) {
            sequence = iterator2.next();
            if (n == n2) {
                return (T)sequence;
            }
            ++n2;
        }
        return function1.invoke((Integer)n);
    }

    public static final <T> T elementAtOrNull(Sequence<? extends T> object, int n) {
        Intrinsics.checkParameterIsNotNull(object, "$this$elementAtOrNull");
        if (n < 0) {
            return null;
        }
        object = object.iterator();
        int n2 = 0;
        while (object.hasNext()) {
            Object e = object.next();
            if (n == n2) {
                return (T)e;
            }
            ++n2;
        }
        return null;
    }

    public static final <T> Sequence<T> filter(Sequence<? extends T> sequence, Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$filter");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        return new FilteringSequence<T>(sequence, true, function1);
    }

    public static final <T> Sequence<T> filterIndexed(Sequence<? extends T> sequence, Function2<? super Integer, ? super T, Boolean> function2) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$filterIndexed");
        Intrinsics.checkParameterIsNotNull(function2, "predicate");
        return new TransformingSequence(new FilteringSequence((Sequence)new IndexingSequence<T>(sequence), true, new Function1<IndexedValue<? extends T>, Boolean>(function2){
            final /* synthetic */ Function2 $predicate;
            {
                this.$predicate = function2;
                super(1);
            }

            public final boolean invoke(IndexedValue<? extends T> indexedValue) {
                Intrinsics.checkParameterIsNotNull(indexedValue, "it");
                return (Boolean)this.$predicate.invoke(indexedValue.getIndex(), indexedValue.getValue());
            }
        }), filterIndexed.2.INSTANCE);
    }

    public static final <T, C extends Collection<? super T>> C filterIndexedTo(Sequence<? extends T> sequence, C c, Function2<? super Integer, ? super T, Boolean> function2) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$filterIndexedTo");
        Intrinsics.checkParameterIsNotNull(c, "destination");
        Intrinsics.checkParameterIsNotNull(function2, "predicate");
        Iterator<T> iterator2 = sequence.iterator();
        int n = 0;
        while (iterator2.hasNext()) {
            sequence = iterator2.next();
            if (n < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) throw (Throwable)new ArithmeticException("Index overflow has happened.");
                CollectionsKt.throwIndexOverflow();
            }
            if (function2.invoke((Integer)n, sequence).booleanValue()) {
                c.add(sequence);
            }
            ++n;
        }
        return c;
    }

    public static final /* synthetic */ <R> Sequence<R> filterIsInstance(Sequence<?> sequence) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$filterIsInstance");
        Intrinsics.needClassReification();
        sequence = SequencesKt.filter(sequence, filterIsInstance.1.INSTANCE);
        if (sequence == null) throw new TypeCastException("null cannot be cast to non-null type kotlin.sequences.Sequence<R>");
        return sequence;
    }

    public static final /* synthetic */ <R, C extends Collection<? super R>> C filterIsInstanceTo(Sequence<?> object, C c) {
        Intrinsics.checkParameterIsNotNull(object, "$this$filterIsInstanceTo");
        Intrinsics.checkParameterIsNotNull(c, "destination");
        object = object.iterator();
        while (object.hasNext()) {
            Object e = object.next();
            Intrinsics.reifiedOperationMarker(3, "R");
            if (!(e instanceof Object)) continue;
            c.add(e);
        }
        return c;
    }

    public static final <T> Sequence<T> filterNot(Sequence<? extends T> sequence, Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$filterNot");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        return new FilteringSequence<T>(sequence, false, function1);
    }

    public static final <T> Sequence<T> filterNotNull(Sequence<? extends T> sequence) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$filterNotNull");
        sequence = SequencesKt.filterNot(sequence, filterNotNull.1.INSTANCE);
        if (sequence == null) throw new TypeCastException("null cannot be cast to non-null type kotlin.sequences.Sequence<T>");
        return sequence;
    }

    public static final <C extends Collection<? super T>, T> C filterNotNullTo(Sequence<? extends T> object, C c) {
        Intrinsics.checkParameterIsNotNull(object, "$this$filterNotNullTo");
        Intrinsics.checkParameterIsNotNull(c, "destination");
        object = object.iterator();
        while (object.hasNext()) {
            Object e = object.next();
            if (e == null) continue;
            c.add(e);
        }
        return c;
    }

    public static final <T, C extends Collection<? super T>> C filterNotTo(Sequence<? extends T> sequence, C c, Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$filterNotTo");
        Intrinsics.checkParameterIsNotNull(c, "destination");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        Iterator<T> iterator2 = sequence.iterator();
        while (iterator2.hasNext()) {
            sequence = iterator2.next();
            if (function1.invoke(sequence).booleanValue()) continue;
            c.add(sequence);
        }
        return c;
    }

    public static final <T, C extends Collection<? super T>> C filterTo(Sequence<? extends T> object, C c, Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(object, "$this$filterTo");
        Intrinsics.checkParameterIsNotNull(c, "destination");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        object = object.iterator();
        while (object.hasNext()) {
            Object e = object.next();
            if (!function1.invoke(e).booleanValue()) continue;
            c.add(e);
        }
        return c;
    }

    private static final <T> T find(Sequence<? extends T> sequence, Function1<? super T, Boolean> function1) {
        Iterator<T> iterator2 = sequence.iterator();
        do {
            if (iterator2.hasNext()) continue;
            sequence = null;
            return (T)sequence;
        } while (!function1.invoke(sequence = iterator2.next()).booleanValue());
        return (T)sequence;
    }

    private static final <T> T findLast(Sequence<? extends T> sequence, Function1<? super T, Boolean> function1) {
        Iterator<T> iterator2 = sequence.iterator();
        sequence = null;
        while (iterator2.hasNext()) {
            T t = iterator2.next();
            if (!function1.invoke(t).booleanValue()) continue;
            sequence = t;
        }
        return (T)sequence;
    }

    public static final <T> T first(Sequence<? extends T> object) {
        Intrinsics.checkParameterIsNotNull(object, "$this$first");
        object = object.iterator();
        if (!object.hasNext()) throw (Throwable)new NoSuchElementException("Sequence is empty.");
        return (T)object.next();
    }

    public static final <T> T first(Sequence<? extends T> object, Function1<? super T, Boolean> function1) {
        Object e;
        Intrinsics.checkParameterIsNotNull(object, "$this$first");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        object = object.iterator();
        do {
            if (!object.hasNext()) throw (Throwable)new NoSuchElementException("Sequence contains no element matching the predicate.");
        } while (!function1.invoke(e = object.next()).booleanValue());
        return (T)e;
    }

    public static final <T> T firstOrNull(Sequence<? extends T> object) {
        Intrinsics.checkParameterIsNotNull(object, "$this$firstOrNull");
        object = object.iterator();
        if (object.hasNext()) return (T)object.next();
        return null;
    }

    public static final <T> T firstOrNull(Sequence<? extends T> object, Function1<? super T, Boolean> function1) {
        Object e;
        Intrinsics.checkParameterIsNotNull(object, "$this$firstOrNull");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        object = object.iterator();
        do {
            if (!object.hasNext()) return null;
        } while (!function1.invoke(e = object.next()).booleanValue());
        return (T)e;
    }

    public static final <T, R> Sequence<R> flatMap(Sequence<? extends T> sequence, Function1<? super T, ? extends Sequence<? extends R>> function1) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$flatMap");
        Intrinsics.checkParameterIsNotNull(function1, "transform");
        return new FlatteningSequence(sequence, function1, flatMap.1.INSTANCE);
    }

    public static final <T, R, C extends Collection<? super R>> C flatMapTo(Sequence<? extends T> object, C c, Function1<? super T, ? extends Sequence<? extends R>> function1) {
        Intrinsics.checkParameterIsNotNull(object, "$this$flatMapTo");
        Intrinsics.checkParameterIsNotNull(c, "destination");
        Intrinsics.checkParameterIsNotNull(function1, "transform");
        object = object.iterator();
        while (object.hasNext()) {
            CollectionsKt.addAll(c, function1.invoke(object.next()));
        }
        return c;
    }

    public static final <T, R> R fold(Sequence<? extends T> object, R r, Function2<? super R, ? super T, ? extends R> function2) {
        Intrinsics.checkParameterIsNotNull(object, "$this$fold");
        Intrinsics.checkParameterIsNotNull(function2, "operation");
        object = object.iterator();
        while (object.hasNext()) {
            r = function2.invoke(r, object.next());
        }
        return r;
    }

    public static final <T, R> R foldIndexed(Sequence<? extends T> object, R r, Function3<? super Integer, ? super R, ? super T, ? extends R> function3) {
        Intrinsics.checkParameterIsNotNull(object, "$this$foldIndexed");
        Intrinsics.checkParameterIsNotNull(function3, "operation");
        object = object.iterator();
        int n = 0;
        while (object.hasNext()) {
            Object e = object.next();
            if (n < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) throw (Throwable)new ArithmeticException("Index overflow has happened.");
                CollectionsKt.throwIndexOverflow();
            }
            r = function3.invoke((Integer)n, r, e);
            ++n;
        }
        return r;
    }

    public static final <T> void forEach(Sequence<? extends T> object, Function1<? super T, Unit> function1) {
        Intrinsics.checkParameterIsNotNull(object, "$this$forEach");
        Intrinsics.checkParameterIsNotNull(function1, "action");
        object = object.iterator();
        while (object.hasNext()) {
            function1.invoke(object.next());
        }
    }

    public static final <T> void forEachIndexed(Sequence<? extends T> object, Function2<? super Integer, ? super T, Unit> function2) {
        Intrinsics.checkParameterIsNotNull(object, "$this$forEachIndexed");
        Intrinsics.checkParameterIsNotNull(function2, "action");
        object = object.iterator();
        int n = 0;
        while (object.hasNext()) {
            Object e = object.next();
            if (n < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) throw (Throwable)new ArithmeticException("Index overflow has happened.");
                CollectionsKt.throwIndexOverflow();
            }
            function2.invoke((Integer)n, e);
            ++n;
        }
    }

    public static final <T, K> Map<K, List<T>> groupBy(Sequence<? extends T> object, Function1<? super T, ? extends K> function1) {
        Intrinsics.checkParameterIsNotNull(object, "$this$groupBy");
        Intrinsics.checkParameterIsNotNull(function1, "keySelector");
        Map map = new LinkedHashMap();
        Iterator<T> iterator2 = object.iterator();
        while (iterator2.hasNext()) {
            T t = iterator2.next();
            K k = function1.invoke(t);
            Object v = map.get(k);
            object = v;
            if (v == null) {
                object = new ArrayList();
                map.put(k, object);
            }
            ((List)object).add(t);
        }
        return map;
    }

    public static final <T, K, V> Map<K, List<V>> groupBy(Sequence<? extends T> object, Function1<? super T, ? extends K> function1, Function1<? super T, ? extends V> function12) {
        Intrinsics.checkParameterIsNotNull(object, "$this$groupBy");
        Intrinsics.checkParameterIsNotNull(function1, "keySelector");
        Intrinsics.checkParameterIsNotNull(function12, "valueTransform");
        Map map = new LinkedHashMap();
        Iterator<T> iterator2 = object.iterator();
        while (iterator2.hasNext()) {
            T t = iterator2.next();
            K k = function1.invoke(t);
            Object v = map.get(k);
            object = v;
            if (v == null) {
                object = new ArrayList();
                map.put(k, object);
            }
            ((List)object).add(function12.invoke(t));
        }
        return map;
    }

    public static final <T, K, M extends Map<? super K, List<T>>> M groupByTo(Sequence<? extends T> arrayList, M m, Function1<? super T, ? extends K> function1) {
        Intrinsics.checkParameterIsNotNull(arrayList, "$this$groupByTo");
        Intrinsics.checkParameterIsNotNull(m, "destination");
        Intrinsics.checkParameterIsNotNull(function1, "keySelector");
        Iterator<T> iterator2 = arrayList.iterator();
        while (iterator2.hasNext()) {
            T t = iterator2.next();
            K k = function1.invoke(t);
            List<T> list = m.get(k);
            arrayList = list;
            if (list == null) {
                arrayList = new ArrayList();
                m.put(k, arrayList);
            }
            ((List)arrayList).add(t);
        }
        return m;
    }

    public static final <T, K, V, M extends Map<? super K, List<V>>> M groupByTo(Sequence<? extends T> arrayList, M m, Function1<? super T, ? extends K> function1, Function1<? super T, ? extends V> function12) {
        Intrinsics.checkParameterIsNotNull(arrayList, "$this$groupByTo");
        Intrinsics.checkParameterIsNotNull(m, "destination");
        Intrinsics.checkParameterIsNotNull(function1, "keySelector");
        Intrinsics.checkParameterIsNotNull(function12, "valueTransform");
        Iterator<T> iterator2 = arrayList.iterator();
        while (iterator2.hasNext()) {
            T t = iterator2.next();
            K k = function1.invoke(t);
            List<V> list = m.get(k);
            arrayList = list;
            if (list == null) {
                arrayList = new ArrayList();
                m.put(k, arrayList);
            }
            ((List)arrayList).add(function12.invoke(t));
        }
        return m;
    }

    public static final <T, K> Grouping<T, K> groupingBy(Sequence<? extends T> sequence, Function1<? super T, ? extends K> function1) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$groupingBy");
        Intrinsics.checkParameterIsNotNull(function1, "keySelector");
        return new Grouping<T, K>(sequence, function1){
            final /* synthetic */ Function1 $keySelector;
            final /* synthetic */ Sequence $this_groupingBy;
            {
                this.$this_groupingBy = sequence;
                this.$keySelector = function1;
            }

            public K keyOf(T t) {
                return (K)this.$keySelector.invoke(t);
            }

            public Iterator<T> sourceIterator() {
                return this.$this_groupingBy.iterator();
            }
        };
    }

    public static final <T> int indexOf(Sequence<? extends T> object, T t) {
        Intrinsics.checkParameterIsNotNull(object, "$this$indexOf");
        object = object.iterator();
        int n = 0;
        while (object.hasNext()) {
            Object e = object.next();
            if (n < 0) {
                CollectionsKt.throwIndexOverflow();
            }
            if (Intrinsics.areEqual(t, e)) {
                return n;
            }
            ++n;
        }
        return -1;
    }

    public static final <T> int indexOfFirst(Sequence<? extends T> object, Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(object, "$this$indexOfFirst");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        object = object.iterator();
        int n = 0;
        while (object.hasNext()) {
            Object e = object.next();
            if (n < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) throw (Throwable)new ArithmeticException("Index overflow has happened.");
                CollectionsKt.throwIndexOverflow();
            }
            if (function1.invoke(e).booleanValue()) {
                return n;
            }
            ++n;
        }
        return -1;
    }

    public static final <T> int indexOfLast(Sequence<? extends T> object, Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(object, "$this$indexOfLast");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        object = object.iterator();
        int n = -1;
        int n2 = 0;
        while (object.hasNext()) {
            Object e = object.next();
            if (n2 < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) throw (Throwable)new ArithmeticException("Index overflow has happened.");
                CollectionsKt.throwIndexOverflow();
            }
            if (function1.invoke(e).booleanValue()) {
                n = n2;
            }
            ++n2;
        }
        return n;
    }

    public static final <T, A extends Appendable> A joinTo(Sequence<? extends T> object, A a, CharSequence charSequence, CharSequence charSequence2, CharSequence charSequence3, int n, CharSequence charSequence4, Function1<? super T, ? extends CharSequence> function1) {
        int n2;
        Intrinsics.checkParameterIsNotNull(object, "$this$joinTo");
        Intrinsics.checkParameterIsNotNull(a, "buffer");
        Intrinsics.checkParameterIsNotNull(charSequence, "separator");
        Intrinsics.checkParameterIsNotNull(charSequence2, "prefix");
        Intrinsics.checkParameterIsNotNull(charSequence3, "postfix");
        Intrinsics.checkParameterIsNotNull(charSequence4, "truncated");
        a.append(charSequence2);
        object = object.iterator();
        int n3 = 0;
        do {
            n2 = n3++;
            if (!object.hasNext()) break;
            charSequence2 = object.next();
            if (n3 > 1) {
                a.append(charSequence);
            }
            if (n >= 0) {
                n2 = n3;
                if (n3 > n) break;
            }
            StringsKt.appendElement(a, charSequence2, function1);
        } while (true);
        if (n >= 0 && n2 > n) {
            a.append(charSequence4);
        }
        a.append(charSequence3);
        return a;
    }

    public static /* synthetic */ Appendable joinTo$default(Sequence sequence, Appendable appendable, CharSequence charSequence, CharSequence charSequence2, CharSequence charSequence3, int n, CharSequence charSequence4, Function1 function1, int n2, Object object) {
        if ((n2 & 2) != 0) {
            charSequence = ", ";
        }
        if ((n2 & 4) != 0) {
            charSequence2 = "";
        }
        if ((n2 & 8) != 0) {
            charSequence3 = "";
        }
        if ((n2 & 16) != 0) {
            n = -1;
        }
        if ((n2 & 32) != 0) {
            charSequence4 = "...";
        }
        if ((n2 & 64) == 0) return SequencesKt.joinTo(sequence, appendable, charSequence, charSequence2, charSequence3, n, charSequence4, function1);
        function1 = null;
        return SequencesKt.joinTo(sequence, appendable, charSequence, charSequence2, charSequence3, n, charSequence4, function1);
    }

    public static final <T> String joinToString(Sequence<? extends T> object, CharSequence charSequence, CharSequence charSequence2, CharSequence charSequence3, int n, CharSequence charSequence4, Function1<? super T, ? extends CharSequence> function1) {
        Intrinsics.checkParameterIsNotNull(object, "$this$joinToString");
        Intrinsics.checkParameterIsNotNull(charSequence, "separator");
        Intrinsics.checkParameterIsNotNull(charSequence2, "prefix");
        Intrinsics.checkParameterIsNotNull(charSequence3, "postfix");
        Intrinsics.checkParameterIsNotNull(charSequence4, "truncated");
        object = ((StringBuilder)SequencesKt.joinTo(object, (Appendable)new StringBuilder(), charSequence, charSequence2, charSequence3, n, charSequence4, function1)).toString();
        Intrinsics.checkExpressionValueIsNotNull(object, "joinTo(StringBuilder(), \u2026ed, transform).toString()");
        return object;
    }

    public static /* synthetic */ String joinToString$default(Sequence sequence, CharSequence charSequence, CharSequence charSequence2, CharSequence charSequence3, int n, CharSequence charSequence4, Function1 function1, int n2, Object object) {
        if ((n2 & 1) != 0) {
            charSequence = ", ";
        }
        if ((n2 & 2) != 0) {
            charSequence2 = "";
        }
        if ((n2 & 4) != 0) {
            charSequence3 = "";
        }
        if ((n2 & 8) != 0) {
            n = -1;
        }
        if ((n2 & 16) != 0) {
            charSequence4 = "...";
        }
        if ((n2 & 32) == 0) return SequencesKt.joinToString(sequence, charSequence, charSequence2, charSequence3, n, charSequence4, function1);
        function1 = null;
        return SequencesKt.joinToString(sequence, charSequence, charSequence2, charSequence3, n, charSequence4, function1);
    }

    public static final <T> T last(Sequence<? extends T> sequence) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$last");
        Iterator<T> iterator2 = sequence.iterator();
        if (!iterator2.hasNext()) throw (Throwable)new NoSuchElementException("Sequence is empty.");
        sequence = iterator2.next();
        while (iterator2.hasNext()) {
            sequence = iterator2.next();
        }
        return (T)sequence;
    }

    public static final <T> T last(Sequence<? extends T> sequence, Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$last");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        Iterator<T> iterator2 = sequence.iterator();
        sequence = null;
        boolean bl = false;
        do {
            if (!iterator2.hasNext()) {
                if (!bl) throw (Throwable)new NoSuchElementException("Sequence contains no element matching the predicate.");
                return (T)sequence;
            }
            T t = iterator2.next();
            if (!function1.invoke(t).booleanValue()) continue;
            sequence = t;
            bl = true;
        } while (true);
    }

    public static final <T> int lastIndexOf(Sequence<? extends T> object, T t) {
        Intrinsics.checkParameterIsNotNull(object, "$this$lastIndexOf");
        object = object.iterator();
        int n = -1;
        int n2 = 0;
        while (object.hasNext()) {
            Object e = object.next();
            if (n2 < 0) {
                CollectionsKt.throwIndexOverflow();
            }
            if (Intrinsics.areEqual(t, e)) {
                n = n2;
            }
            ++n2;
        }
        return n;
    }

    public static final <T> T lastOrNull(Sequence<? extends T> sequence) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$lastOrNull");
        Iterator<T> iterator2 = sequence.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        sequence = iterator2.next();
        while (iterator2.hasNext()) {
            sequence = iterator2.next();
        }
        return (T)sequence;
    }

    public static final <T> T lastOrNull(Sequence<? extends T> sequence, Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$lastOrNull");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        Iterator<T> iterator2 = sequence.iterator();
        sequence = null;
        while (iterator2.hasNext()) {
            T t = iterator2.next();
            if (!function1.invoke(t).booleanValue()) continue;
            sequence = t;
        }
        return (T)sequence;
    }

    public static final <T, R> Sequence<R> map(Sequence<? extends T> sequence, Function1<? super T, ? extends R> function1) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$map");
        Intrinsics.checkParameterIsNotNull(function1, "transform");
        return new TransformingSequence<T, R>(sequence, function1);
    }

    public static final <T, R> Sequence<R> mapIndexed(Sequence<? extends T> sequence, Function2<? super Integer, ? super T, ? extends R> function2) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$mapIndexed");
        Intrinsics.checkParameterIsNotNull(function2, "transform");
        return new TransformingIndexedSequence<T, R>(sequence, function2);
    }

    public static final <T, R> Sequence<R> mapIndexedNotNull(Sequence<? extends T> sequence, Function2<? super Integer, ? super T, ? extends R> function2) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$mapIndexedNotNull");
        Intrinsics.checkParameterIsNotNull(function2, "transform");
        return SequencesKt.filterNotNull((Sequence)new TransformingIndexedSequence<T, R>(sequence, function2));
    }

    public static final <T, R, C extends Collection<? super R>> C mapIndexedNotNullTo(Sequence<? extends T> object, C c, Function2<? super Integer, ? super T, ? extends R> function2) {
        Intrinsics.checkParameterIsNotNull(object, "$this$mapIndexedNotNullTo");
        Intrinsics.checkParameterIsNotNull(c, "destination");
        Intrinsics.checkParameterIsNotNull(function2, "transform");
        object = object.iterator();
        int n = 0;
        while (object.hasNext()) {
            Object object2 = object.next();
            if (n < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) throw (Throwable)new ArithmeticException("Index overflow has happened.");
                CollectionsKt.throwIndexOverflow();
            }
            if ((object2 = function2.invoke((Integer)n, object2)) != null) {
                c.add(object2);
            }
            ++n;
        }
        return c;
    }

    public static final <T, R, C extends Collection<? super R>> C mapIndexedTo(Sequence<? extends T> sequence, C c, Function2<? super Integer, ? super T, ? extends R> function2) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$mapIndexedTo");
        Intrinsics.checkParameterIsNotNull(c, "destination");
        Intrinsics.checkParameterIsNotNull(function2, "transform");
        Iterator<T> iterator2 = sequence.iterator();
        int n = 0;
        while (iterator2.hasNext()) {
            sequence = iterator2.next();
            if (n < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) throw (Throwable)new ArithmeticException("Index overflow has happened.");
                CollectionsKt.throwIndexOverflow();
            }
            c.add(function2.invoke((Integer)n, sequence));
            ++n;
        }
        return c;
    }

    public static final <T, R> Sequence<R> mapNotNull(Sequence<? extends T> sequence, Function1<? super T, ? extends R> function1) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$mapNotNull");
        Intrinsics.checkParameterIsNotNull(function1, "transform");
        return SequencesKt.filterNotNull((Sequence)new TransformingSequence<T, R>(sequence, function1));
    }

    public static final <T, R, C extends Collection<? super R>> C mapNotNullTo(Sequence<? extends T> object, C c, Function1<? super T, ? extends R> function1) {
        Intrinsics.checkParameterIsNotNull(object, "$this$mapNotNullTo");
        Intrinsics.checkParameterIsNotNull(c, "destination");
        Intrinsics.checkParameterIsNotNull(function1, "transform");
        object = object.iterator();
        while (object.hasNext()) {
            R r = function1.invoke(object.next());
            if (r == null) continue;
            c.add(r);
        }
        return c;
    }

    public static final <T, R, C extends Collection<? super R>> C mapTo(Sequence<? extends T> object, C c, Function1<? super T, ? extends R> function1) {
        Intrinsics.checkParameterIsNotNull(object, "$this$mapTo");
        Intrinsics.checkParameterIsNotNull(c, "destination");
        Intrinsics.checkParameterIsNotNull(function1, "transform");
        object = object.iterator();
        while (object.hasNext()) {
            c.add(function1.invoke(object.next()));
        }
        return c;
    }

    public static final <T extends Comparable<? super T>> T max(Sequence<? extends T> object) {
        Intrinsics.checkParameterIsNotNull(object, "$this$max");
        Iterator<T> iterator2 = object.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        object = (Comparable)iterator2.next();
        while (iterator2.hasNext()) {
            Comparable comparable = (Comparable)iterator2.next();
            if (object.compareTo(comparable) >= 0) continue;
            object = comparable;
        }
        return (T)object;
    }

    public static final Double max(Sequence<Double> object) {
        double d;
        Intrinsics.checkParameterIsNotNull(object, "$this$max");
        object = object.iterator();
        if (!object.hasNext()) {
            return null;
        }
        double d2 = d = ((Number)object.next()).doubleValue();
        if (Double.isNaN(d)) {
            return d;
        }
        while (object.hasNext()) {
            d = ((Number)object.next()).doubleValue();
            if (Double.isNaN(d)) {
                return d;
            }
            if (!(d2 < d)) continue;
            d2 = d;
        }
        return d2;
    }

    public static final Float max(Sequence<Float> object) {
        float f;
        Intrinsics.checkParameterIsNotNull(object, "$this$max");
        object = object.iterator();
        if (!object.hasNext()) {
            return null;
        }
        float f2 = f = ((Number)object.next()).floatValue();
        if (Float.isNaN(f)) {
            return Float.valueOf(f);
        }
        while (object.hasNext()) {
            f = ((Number)object.next()).floatValue();
            if (Float.isNaN(f)) {
                return Float.valueOf(f);
            }
            if (!(f2 < f)) continue;
            f2 = f;
        }
        return Float.valueOf(f2);
    }

    public static final <T, R extends Comparable<? super R>> T maxBy(Sequence<? extends T> object, Function1<? super T, ? extends R> function1) {
        T t;
        Intrinsics.checkParameterIsNotNull(object, "$this$maxBy");
        Intrinsics.checkParameterIsNotNull(function1, "selector");
        Iterator<T> iterator2 = object.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        T t2 = iterator2.next();
        if (!iterator2.hasNext()) {
            return t2;
        }
        object = (Comparable)function1.invoke(t2);
        do {
            T t3 = iterator2.next();
            Comparable comparable = (Comparable)function1.invoke(t3);
            t = t2;
            Object object2 = object;
            if (object.compareTo(comparable) < 0) {
                t = t3;
                object2 = comparable;
            }
            t2 = t;
            object = object2;
        } while (iterator2.hasNext());
        return t;
    }

    public static final <T> T maxWith(Sequence<? extends T> sequence, Comparator<? super T> comparator) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$maxWith");
        Intrinsics.checkParameterIsNotNull(comparator, "comparator");
        Iterator<T> iterator2 = sequence.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        sequence = iterator2.next();
        while (iterator2.hasNext()) {
            T t = iterator2.next();
            if (comparator.compare(sequence, (Sequence<T>)t) >= 0) continue;
            sequence = t;
        }
        return (T)sequence;
    }

    public static final <T extends Comparable<? super T>> T min(Sequence<? extends T> object) {
        Intrinsics.checkParameterIsNotNull(object, "$this$min");
        Iterator<T> iterator2 = object.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        object = (Comparable)iterator2.next();
        while (iterator2.hasNext()) {
            Comparable comparable = (Comparable)iterator2.next();
            if (object.compareTo(comparable) <= 0) continue;
            object = comparable;
        }
        return (T)object;
    }

    public static final Double min(Sequence<Double> object) {
        double d;
        Intrinsics.checkParameterIsNotNull(object, "$this$min");
        object = object.iterator();
        if (!object.hasNext()) {
            return null;
        }
        double d2 = d = ((Number)object.next()).doubleValue();
        if (Double.isNaN(d)) {
            return d;
        }
        while (object.hasNext()) {
            d = ((Number)object.next()).doubleValue();
            if (Double.isNaN(d)) {
                return d;
            }
            if (!(d2 > d)) continue;
            d2 = d;
        }
        return d2;
    }

    public static final Float min(Sequence<Float> object) {
        float f;
        Intrinsics.checkParameterIsNotNull(object, "$this$min");
        object = object.iterator();
        if (!object.hasNext()) {
            return null;
        }
        float f2 = f = ((Number)object.next()).floatValue();
        if (Float.isNaN(f)) {
            return Float.valueOf(f);
        }
        while (object.hasNext()) {
            f = ((Number)object.next()).floatValue();
            if (Float.isNaN(f)) {
                return Float.valueOf(f);
            }
            if (!(f2 > f)) continue;
            f2 = f;
        }
        return Float.valueOf(f2);
    }

    public static final <T, R extends Comparable<? super R>> T minBy(Sequence<? extends T> object, Function1<? super T, ? extends R> function1) {
        T t;
        Intrinsics.checkParameterIsNotNull(object, "$this$minBy");
        Intrinsics.checkParameterIsNotNull(function1, "selector");
        Iterator<T> iterator2 = object.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        T t2 = iterator2.next();
        if (!iterator2.hasNext()) {
            return t2;
        }
        Object object2 = (Comparable)function1.invoke(t2);
        do {
            T t3 = iterator2.next();
            Comparable comparable = (Comparable)function1.invoke(t3);
            t = t2;
            object = object2;
            if (object2.compareTo(comparable) > 0) {
                t = t3;
                object = comparable;
            }
            t2 = t;
            object2 = object;
        } while (iterator2.hasNext());
        return t;
    }

    public static final <T> T minWith(Sequence<? extends T> sequence, Comparator<? super T> comparator) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$minWith");
        Intrinsics.checkParameterIsNotNull(comparator, "comparator");
        Iterator<T> iterator2 = sequence.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        sequence = iterator2.next();
        while (iterator2.hasNext()) {
            T t = iterator2.next();
            if (comparator.compare(sequence, (Sequence<T>)t) <= 0) continue;
            sequence = t;
        }
        return (T)sequence;
    }

    public static final <T> Sequence<T> minus(Sequence<? extends T> sequence, Iterable<? extends T> iterable) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$minus");
        Intrinsics.checkParameterIsNotNull(iterable, "elements");
        return new Sequence<T>(sequence, iterable){
            final /* synthetic */ Iterable $elements;
            final /* synthetic */ Sequence $this_minus;
            {
                this.$this_minus = sequence;
                this.$elements = iterable;
            }

            public Iterator<T> iterator() {
                Collection<T> collection = CollectionsKt.convertToSetForSetOperation(this.$elements);
                if (!collection.isEmpty()) return SequencesKt.filterNot(this.$this_minus, (Function1)new Function1<T, Boolean>(collection){
                    final /* synthetic */ Collection $other;
                    {
                        this.$other = collection;
                        super(1);
                    }

                    public final boolean invoke(T t) {
                        return this.$other.contains(t);
                    }
                }).iterator();
                return this.$this_minus.iterator();
            }
        };
    }

    public static final <T> Sequence<T> minus(Sequence<? extends T> sequence, T t) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$minus");
        return new Sequence<T>(sequence, t){
            final /* synthetic */ Object $element;
            final /* synthetic */ Sequence $this_minus;
            {
                this.$this_minus = sequence;
                this.$element = object;
            }

            public Iterator<T> iterator() {
                kotlin.jvm.internal.Ref$BooleanRef booleanRef = new kotlin.jvm.internal.Ref$BooleanRef();
                booleanRef.element = false;
                return SequencesKt.filter(this.$this_minus, (Function1)new Function1<T, Boolean>(this, booleanRef){
                    final /* synthetic */ kotlin.jvm.internal.Ref$BooleanRef $removed;
                    final /* synthetic */ minus.1 this$0;
                    {
                        this.this$0 = var1_1;
                        this.$removed = booleanRef;
                        super(1);
                    }

                    public final boolean invoke(T t) {
                        boolean bl;
                        boolean bl2 = this.$removed.element;
                        boolean bl3 = bl = true;
                        if (bl2) return bl3;
                        bl3 = bl;
                        if (!Intrinsics.areEqual(t, this.this$0.$element)) return bl3;
                        this.$removed.element = true;
                        return false;
                    }
                }).iterator();
            }
        };
    }

    public static final <T> Sequence<T> minus(Sequence<? extends T> sequence, Sequence<? extends T> sequence2) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$minus");
        Intrinsics.checkParameterIsNotNull(sequence2, "elements");
        return new Sequence<T>(sequence, sequence2){
            final /* synthetic */ Sequence $elements;
            final /* synthetic */ Sequence $this_minus;
            {
                this.$this_minus = sequence;
                this.$elements = sequence2;
            }

            public Iterator<T> iterator() {
                HashSet<T> hashSet = SequencesKt.toHashSet(this.$elements);
                if (!hashSet.isEmpty()) return SequencesKt.filterNot(this.$this_minus, (Function1)new Function1<T, Boolean>(hashSet){
                    final /* synthetic */ HashSet $other;
                    {
                        this.$other = hashSet;
                        super(1);
                    }

                    public final boolean invoke(T t) {
                        return this.$other.contains(t);
                    }
                }).iterator();
                return this.$this_minus.iterator();
            }
        };
    }

    public static final <T> Sequence<T> minus(Sequence<? extends T> sequence, T[] arrT) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$minus");
        Intrinsics.checkParameterIsNotNull(arrT, "elements");
        boolean bl = arrT.length == 0;
        if (!bl) return new Sequence<T>(sequence, arrT){
            final /* synthetic */ Object[] $elements;
            final /* synthetic */ Sequence $this_minus;
            {
                this.$this_minus = sequence;
                this.$elements = arrobject;
            }

            public Iterator<T> iterator() {
                HashSet<Object> hashSet = ArraysKt.toHashSet(this.$elements);
                return SequencesKt.filterNot(this.$this_minus, (Function1)new Function1<T, Boolean>(hashSet){
                    final /* synthetic */ HashSet $other;
                    {
                        this.$other = hashSet;
                        super(1);
                    }

                    public final boolean invoke(T t) {
                        return this.$other.contains(t);
                    }
                }).iterator();
            }
        };
        return sequence;
    }

    private static final <T> Sequence<T> minusElement(Sequence<? extends T> sequence, T t) {
        return SequencesKt.minus(sequence, t);
    }

    public static final <T> boolean none(Sequence<? extends T> sequence) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$none");
        return sequence.iterator().hasNext() ^ true;
    }

    public static final <T> boolean none(Sequence<? extends T> object, Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(object, "$this$none");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        object = object.iterator();
        do {
            if (!object.hasNext()) return true;
        } while (!function1.invoke(object.next()).booleanValue());
        return false;
    }

    public static final <T> Sequence<T> onEach(Sequence<? extends T> sequence, Function1<? super T, Unit> function1) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$onEach");
        Intrinsics.checkParameterIsNotNull(function1, "action");
        return SequencesKt.map(sequence, new Function1<T, T>(function1){
            final /* synthetic */ Function1 $action;
            {
                this.$action = function1;
                super(1);
            }

            public final T invoke(T t) {
                this.$action.invoke(t);
                return t;
            }
        });
    }

    public static final <T> Pair<List<T>, List<T>> partition(Sequence<? extends T> sequence, Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$partition");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        ArrayList<Sequence<T>> arrayList = new ArrayList<Sequence<T>>();
        ArrayList<Sequence<T>> arrayList2 = new ArrayList<Sequence<T>>();
        Iterator<T> iterator2 = sequence.iterator();
        while (iterator2.hasNext()) {
            sequence = iterator2.next();
            if (function1.invoke(sequence).booleanValue()) {
                arrayList.add(sequence);
                continue;
            }
            arrayList2.add(sequence);
        }
        return new Pair<List<T>, List<T>>(arrayList, arrayList2);
    }

    public static final <T> Sequence<T> plus(Sequence<? extends T> sequence, Iterable<? extends T> iterable) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$plus");
        Intrinsics.checkParameterIsNotNull(iterable, "elements");
        return SequencesKt.flatten(SequencesKt.sequenceOf(sequence, CollectionsKt.asSequence(iterable)));
    }

    public static final <T> Sequence<T> plus(Sequence<? extends T> sequence, T t) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$plus");
        return SequencesKt.flatten(SequencesKt.sequenceOf(sequence, SequencesKt.sequenceOf(t)));
    }

    public static final <T> Sequence<T> plus(Sequence<? extends T> sequence, Sequence<? extends T> sequence2) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$plus");
        Intrinsics.checkParameterIsNotNull(sequence2, "elements");
        return SequencesKt.flatten(SequencesKt.sequenceOf(sequence, sequence2));
    }

    public static final <T> Sequence<T> plus(Sequence<? extends T> sequence, T[] arrT) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$plus");
        Intrinsics.checkParameterIsNotNull(arrT, "elements");
        return SequencesKt.plus(sequence, (Iterable)ArraysKt.asList(arrT));
    }

    private static final <T> Sequence<T> plusElement(Sequence<? extends T> sequence, T t) {
        return SequencesKt.plus(sequence, t);
    }

    public static final <S, T extends S> S reduce(Sequence<? extends T> sequence, Function2<? super S, ? super T, ? extends S> function2) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$reduce");
        Intrinsics.checkParameterIsNotNull(function2, "operation");
        Iterator<T> iterator2 = sequence.iterator();
        if (!iterator2.hasNext()) throw (Throwable)new UnsupportedOperationException("Empty sequence can't be reduced.");
        sequence = iterator2.next();
        while (iterator2.hasNext()) {
            sequence = function2.invoke(sequence, iterator2.next());
        }
        return (S)sequence;
    }

    public static final <S, T extends S> S reduceIndexed(Sequence<? extends T> sequence, Function3<? super Integer, ? super S, ? super T, ? extends S> function3) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$reduceIndexed");
        Intrinsics.checkParameterIsNotNull(function3, "operation");
        Iterator<T> iterator2 = sequence.iterator();
        if (!iterator2.hasNext()) throw (Throwable)new UnsupportedOperationException("Empty sequence can't be reduced.");
        sequence = iterator2.next();
        int n = 1;
        while (iterator2.hasNext()) {
            if (n < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) throw (Throwable)new ArithmeticException("Index overflow has happened.");
                CollectionsKt.throwIndexOverflow();
            }
            sequence = function3.invoke((Integer)n, sequence, iterator2.next());
            ++n;
        }
        return (S)sequence;
    }

    public static final <S, T extends S> S reduceOrNull(Sequence<? extends T> sequence, Function2<? super S, ? super T, ? extends S> function2) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$reduceOrNull");
        Intrinsics.checkParameterIsNotNull(function2, "operation");
        Iterator<T> iterator2 = sequence.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        sequence = iterator2.next();
        while (iterator2.hasNext()) {
            sequence = function2.invoke(sequence, iterator2.next());
        }
        return (S)sequence;
    }

    public static final <T> Sequence<T> requireNoNulls(Sequence<? extends T> sequence) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$requireNoNulls");
        return SequencesKt.map(sequence, new Function1<T, T>(sequence){
            final /* synthetic */ Sequence $this_requireNoNulls;
            {
                this.$this_requireNoNulls = sequence;
                super(1);
            }

            public final T invoke(T object) {
                if (object != null) {
                    return (T)object;
                }
                object = new StringBuilder();
                ((StringBuilder)object).append("null element found in ");
                ((StringBuilder)object).append(this.$this_requireNoNulls);
                ((StringBuilder)object).append('.');
                throw (Throwable)new IllegalArgumentException(((StringBuilder)object).toString());
            }
        });
    }

    public static final <T, R> Sequence<R> scan(Sequence<? extends T> sequence, R r, Function2<? super R, ? super T, ? extends R> function2) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$scan");
        Intrinsics.checkParameterIsNotNull(function2, "operation");
        return SequencesKt.sequence(new Function2<kotlin.sequences.SequenceScope<? super R>, Continuation<? super Unit>, Object>(sequence, r, function2, null){
            final /* synthetic */ Object $initial;
            final /* synthetic */ Function2 $operation;
            final /* synthetic */ Sequence $this_scan;
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            int label;
            private kotlin.sequences.SequenceScope p$;
            {
                this.$this_scan = sequence;
                this.$initial = object;
                this.$operation = function2;
                super(2, continuation2);
            }

            public final Continuation<Unit> create(Object object, Continuation<?> function2) {
                Intrinsics.checkParameterIsNotNull(function2, "completion");
                function2 = new /* invalid duplicate definition of identical inner class */;
                function2.p$ = (kotlin.sequences.SequenceScope)object;
                return function2;
            }

            public final Object invoke(Object object, Object object2) {
                return (this.create(object, (Continuation)object2)).invokeSuspend(Unit.INSTANCE);
            }

            public final Object invokeSuspend(Object object) {
                Object object2;
                Object object3;
                Object object4;
                Iterator<T> iterator2;
                block4 : {
                    block5 : {
                        block2 : {
                            block3 : {
                                object2 = kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED();
                                int n = this.label;
                                if (n == 0) break block2;
                                if (n == 1) break block3;
                                if (n != 2) throw new java.lang.IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                                iterator2 = (Iterator)this.L$3;
                                object4 = this.L$1;
                                object3 = (kotlin.sequences.SequenceScope)this.L$0;
                                kotlin.ResultKt.throwOnFailure(object);
                                object = object4;
                                break block4;
                            }
                            object3 = (kotlin.sequences.SequenceScope)this.L$0;
                            kotlin.ResultKt.throwOnFailure(object);
                            object = object3;
                            break block5;
                        }
                        kotlin.ResultKt.throwOnFailure(object);
                        object3 = this.p$;
                        iterator2 = this.$initial;
                        this.L$0 = object3;
                        this.label = 1;
                        object = object3;
                        if (((kotlin.sequences.SequenceScope)object3).yield(iterator2, this) == object2) {
                            return object2;
                        }
                    }
                    object4 = this.$initial;
                    iterator2 = this.$this_scan.iterator();
                    object3 = object;
                    object = object4;
                }
                do {
                    if (!iterator2.hasNext()) return Unit.INSTANCE;
                    T t = iterator2.next();
                    object4 = this.$operation.invoke(object, t);
                    this.L$0 = object3;
                    this.L$1 = object4;
                    this.L$2 = t;
                    this.L$3 = iterator2;
                    this.label = 2;
                    object = object4;
                } while (((kotlin.sequences.SequenceScope)object3).yield(object4, this) != object2);
                return object2;
            }
        });
    }

    public static final <T, R> Sequence<R> scanIndexed(Sequence<? extends T> sequence, R r, Function3<? super Integer, ? super R, ? super T, ? extends R> function3) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$scanIndexed");
        Intrinsics.checkParameterIsNotNull(function3, "operation");
        return SequencesKt.sequence(new Function2<kotlin.sequences.SequenceScope<? super R>, Continuation<? super Unit>, Object>(sequence, r, function3, null){
            final /* synthetic */ Object $initial;
            final /* synthetic */ Function3 $operation;
            final /* synthetic */ Sequence $this_scanIndexed;
            int I$0;
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            int label;
            private kotlin.sequences.SequenceScope p$;
            {
                this.$this_scanIndexed = sequence;
                this.$initial = object;
                this.$operation = function3;
                super(2, continuation2);
            }

            public final Continuation<Unit> create(Object object, Continuation<?> function2) {
                Intrinsics.checkParameterIsNotNull(function2, "completion");
                function2 = new /* invalid duplicate definition of identical inner class */;
                function2.p$ = (kotlin.sequences.SequenceScope)object;
                return function2;
            }

            public final Object invoke(Object object, Object object2) {
                return (this.create(object, (Continuation)object2)).invokeSuspend(Unit.INSTANCE);
            }

            public final Object invokeSuspend(Object object) {
                Object object2;
                Object object3;
                Object object4;
                int n;
                Iterator<Object> iterator2;
                block6 : {
                    block7 : {
                        block4 : {
                            block5 : {
                                object2 = kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED();
                                n = this.label;
                                if (n == 0) break block4;
                                if (n == 1) break block5;
                                if (n != 2) throw new java.lang.IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                                iterator2 = (Iterator)this.L$3;
                                object4 = this.L$1;
                                n = this.I$0;
                                object3 = (kotlin.sequences.SequenceScope)this.L$0;
                                kotlin.ResultKt.throwOnFailure(object);
                                object = object4;
                                break block6;
                            }
                            iterator2 = (kotlin.sequences.SequenceScope)this.L$0;
                            kotlin.ResultKt.throwOnFailure(object);
                            object = iterator2;
                            break block7;
                        }
                        kotlin.ResultKt.throwOnFailure(object);
                        iterator2 = this.p$;
                        object3 = this.$initial;
                        this.L$0 = iterator2;
                        this.label = 1;
                        object = iterator2;
                        if (((kotlin.sequences.SequenceScope)((Object)iterator2)).yield(object3, this) == object2) {
                            return object2;
                        }
                    }
                    n = 0;
                    object4 = this.$initial;
                    iterator2 = this.$this_scanIndexed.iterator();
                    object3 = object;
                    object = object4;
                }
                while (iterator2.hasNext()) {
                    object4 = iterator2.next();
                    Function3 function3 = this.$operation;
                    int n2 = n + 1;
                    if (n < 0) {
                        CollectionsKt.throwIndexOverflow();
                    }
                    object = function3.invoke(kotlin.coroutines.jvm.internal.Boxing.boxInt(n), object, object4);
                    this.L$0 = object3;
                    this.I$0 = n2;
                    this.L$1 = object;
                    this.L$2 = object4;
                    this.L$3 = iterator2;
                    this.label = 2;
                    if (((kotlin.sequences.SequenceScope)object3).yield(object, this) == object2) {
                        return object2;
                    }
                    n = n2;
                }
                return Unit.INSTANCE;
            }
        });
    }

    public static final <S, T extends S> Sequence<S> scanReduce(Sequence<? extends T> sequence, Function2<? super S, ? super T, ? extends S> function2) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$scanReduce");
        Intrinsics.checkParameterIsNotNull(function2, "operation");
        return SequencesKt.sequence(new Function2<kotlin.sequences.SequenceScope<? super S>, Continuation<? super Unit>, Object>(sequence, function2, null){
            final /* synthetic */ Function2 $operation;
            final /* synthetic */ Sequence $this_scanReduce;
            Object L$0;
            Object L$1;
            Object L$2;
            int label;
            private kotlin.sequences.SequenceScope p$;
            {
                this.$this_scanReduce = sequence;
                this.$operation = function2;
                super(2, continuation2);
            }

            public final Continuation<Unit> create(Object object, Continuation<?> function2) {
                Intrinsics.checkParameterIsNotNull(function2, "completion");
                function2 = new /* invalid duplicate definition of identical inner class */;
                function2.p$ = (kotlin.sequences.SequenceScope)object;
                return function2;
            }

            public final Object invoke(Object object, Object object2) {
                return (this.create(object, (Continuation)object2)).invokeSuspend(Unit.INSTANCE);
            }

            public final Object invokeSuspend(Object object) {
                Object object2;
                Iterator iterator2;
                kotlin.sequences.SequenceScope sequenceScope;
                Object object3 = kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED();
                int n = this.label;
                if (n != 0) {
                    if (n != 1) {
                        if (n != 2) throw new java.lang.IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                    }
                    object2 = this.L$2;
                    iterator2 = (Iterator)this.L$1;
                    sequenceScope = (kotlin.sequences.SequenceScope)this.L$0;
                    kotlin.ResultKt.throwOnFailure(object);
                    object = object2;
                } else {
                    kotlin.ResultKt.throwOnFailure(object);
                    sequenceScope = this.p$;
                    iterator2 = this.$this_scanReduce.iterator();
                    if (!iterator2.hasNext()) return Unit.INSTANCE;
                    object = iterator2.next();
                    this.L$0 = sequenceScope;
                    this.L$1 = iterator2;
                    this.L$2 = object;
                    this.label = 1;
                    if (sequenceScope.yield(object, this) == object3) {
                        return object3;
                    }
                }
                do {
                    if (!iterator2.hasNext()) return Unit.INSTANCE;
                    object2 = this.$operation.invoke(object, iterator2.next());
                    this.L$0 = sequenceScope;
                    this.L$1 = iterator2;
                    this.L$2 = object2;
                    this.label = 2;
                    object = object2;
                } while (sequenceScope.yield(object2, this) != object3);
                return object3;
            }
        });
    }

    public static final <S, T extends S> Sequence<S> scanReduceIndexed(Sequence<? extends T> sequence, Function3<? super Integer, ? super S, ? super T, ? extends S> function3) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$scanReduceIndexed");
        Intrinsics.checkParameterIsNotNull(function3, "operation");
        return SequencesKt.sequence(new Function2<kotlin.sequences.SequenceScope<? super S>, Continuation<? super Unit>, Object>(sequence, function3, null){
            final /* synthetic */ Function3 $operation;
            final /* synthetic */ Sequence $this_scanReduceIndexed;
            int I$0;
            Object L$0;
            Object L$1;
            Object L$2;
            int label;
            private kotlin.sequences.SequenceScope p$;
            {
                this.$this_scanReduceIndexed = sequence;
                this.$operation = function3;
                super(2, continuation2);
            }

            public final Continuation<Unit> create(Object object, Continuation<?> function2) {
                Intrinsics.checkParameterIsNotNull(function2, "completion");
                function2 = new /* invalid duplicate definition of identical inner class */;
                function2.p$ = (kotlin.sequences.SequenceScope)object;
                return function2;
            }

            public final Object invoke(Object object, Object object2) {
                return (this.create(object, (Continuation)object2)).invokeSuspend(Unit.INSTANCE);
            }

            public final Object invokeSuspend(Object object) {
                Object object2;
                Iterator iterator2;
                Object object3;
                Object object4;
                Object object5 = kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED();
                int n = this.label;
                int n2 = 1;
                if (n != 0) {
                    if (n != 1) {
                        if (n != 2) throw new java.lang.IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        n2 = this.I$0;
                        object3 = this.L$2;
                        iterator2 = (Iterator)this.L$1;
                        object2 = (kotlin.sequences.SequenceScope)this.L$0;
                        kotlin.ResultKt.throwOnFailure(object);
                        object = object3;
                    } else {
                        object3 = this.L$2;
                        iterator2 = (Iterator)this.L$1;
                        object2 = (kotlin.sequences.SequenceScope)this.L$0;
                        kotlin.ResultKt.throwOnFailure(object);
                        object = object3;
                    }
                } else {
                    kotlin.ResultKt.throwOnFailure(object);
                    object3 = this.p$;
                    iterator2 = this.$this_scanReduceIndexed.iterator();
                    if (!iterator2.hasNext()) return Unit.INSTANCE;
                    object4 = iterator2.next();
                    this.L$0 = object3;
                    this.L$1 = iterator2;
                    this.L$2 = object4;
                    this.label = 1;
                    object = object4;
                    object2 = object3;
                    if (((kotlin.sequences.SequenceScope)object3).yield(object4, this) == object5) {
                        return object5;
                    }
                }
                do {
                    object3 = this;
                    if (!iterator2.hasNext()) return Unit.INSTANCE;
                    object4 = object3.$operation;
                    n = n2 + 1;
                    if (n2 < 0) {
                        CollectionsKt.throwIndexOverflow();
                    }
                    object = object4.invoke((Integer)kotlin.coroutines.jvm.internal.Boxing.boxInt(n2), (Object)object, iterator2.next());
                    object3.L$0 = object2;
                    object3.L$1 = iterator2;
                    object3.L$2 = object;
                    object3.I$0 = n;
                    object3.label = 2;
                    if (((kotlin.sequences.SequenceScope)object2).yield(object, (Continuation<? super Unit>)object3) == object5) {
                        return object5;
                    }
                    n2 = n;
                } while (true);
            }
        });
    }

    public static final <T> T single(Sequence<? extends T> object) {
        Intrinsics.checkParameterIsNotNull(object, "$this$single");
        object = object.iterator();
        if (!object.hasNext()) throw (Throwable)new NoSuchElementException("Sequence is empty.");
        Object e = object.next();
        if (object.hasNext()) throw (Throwable)new IllegalArgumentException("Sequence has more than one element.");
        return (T)e;
    }

    public static final <T> T single(Sequence<? extends T> sequence, Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$single");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        Iterator<T> iterator2 = sequence.iterator();
        sequence = null;
        boolean bl = false;
        do {
            if (!iterator2.hasNext()) {
                if (!bl) throw (Throwable)new NoSuchElementException("Sequence contains no element matching the predicate.");
                return (T)sequence;
            }
            T t = iterator2.next();
            if (!function1.invoke(t).booleanValue()) continue;
            if (bl) throw (Throwable)new IllegalArgumentException("Sequence contains more than one matching element.");
            sequence = t;
            bl = true;
        } while (true);
    }

    public static final <T> T singleOrNull(Sequence<? extends T> sequence) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$singleOrNull");
        Iterator<T> iterator2 = sequence.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        sequence = iterator2.next();
        if (!iterator2.hasNext()) return (T)sequence;
        return null;
    }

    public static final <T> T singleOrNull(Sequence<? extends T> sequence, Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$singleOrNull");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        Iterator<T> iterator2 = sequence.iterator();
        boolean bl = false;
        sequence = null;
        do {
            if (!iterator2.hasNext()) {
                if (bl) return (T)sequence;
                return null;
            }
            T t = iterator2.next();
            if (!function1.invoke(t).booleanValue()) continue;
            if (bl) {
                return null;
            }
            bl = true;
            sequence = t;
        } while (true);
    }

    public static final <T extends Comparable<? super T>> Sequence<T> sorted(Sequence<? extends T> sequence) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$sorted");
        return new Sequence<T>(sequence){
            final /* synthetic */ Sequence $this_sorted;
            {
                this.$this_sorted = sequence;
            }

            public Iterator<T> iterator() {
                List<T> list = SequencesKt.toMutableList(this.$this_sorted);
                CollectionsKt.sort(list);
                return list.iterator();
            }
        };
    }

    public static final <T, R extends Comparable<? super R>> Sequence<T> sortedBy(Sequence<? extends T> sequence, Function1<? super T, ? extends R> function1) {
        Intrinsics.checkParameterIsNotNull(sequence, "$this$sortedBy");
        Intrinsics.checkParameterIsNotNull(function1, "selector");
        return SequencesKt.sortedWith(sequence, }
    java.lang.IllegalStateException: Inner class got unexpected class file - revert this change
    
    